(function () {
  this.WC = this.WC || {
    name: 'WizCalendar',
    version: '0.0.1',
    build: ''
  };

  if (0.9.toFixed(0) !== '1') {
    Number.prototype.toFixed = (function () {
      var oldToFixed = Number.prototype.toFixed;
      return function (precision) {
        var power = Math.pow(10, precision || 0);
        return oldToFixed.call((Math.round(this * power) / power), precision);
      };
    })();
  }


  var int = this.WC.int = function (v) {
    return Math[v < 0 ? 'ceil' : 'floor'](v);
  };

  var Angle = this.WC.Angle = function (rad) {
    this.rad = Angle.inPI2(rad);
  };

  Angle.D2R = Math.PI / 180.0;
  Angle.R2D = 180.0 / Math.PI;
  Angle.PI2 = 2 * Math.PI;
  Angle.R2A = 180 * 3600 / Math.PI; // 3600.0 * (180 / Math.PI); //每弧度的角秒数

  Angle.rad = function (rad) {
    return new Angle(rad);
  };

  Angle.deg = function (deg) {
    return new Angle(deg * Angle.D2R);
  };

  Angle.arc = function (arc) {
    return new Angle(arc / Angle.R2A);
  };

  Angle.inPI2 = function (rad) {
    rad = rad % Angle.PI2;
    if (rad < 0) {
      rad += Angle.PI2;
    }
    return rad;
  };

  Angle.prototype = {
    valueOf: function () {
      return this.rad;
    },
    toString: function () {
      return this.rad + "";
    },
    inPI2: function () {
      return Angle.inPI2(this.rad);
    },
    toDeg: function () {
      return this.rad * Angle.R2D;
    },
    toDMS: function (formate) {
      var d = this.rad;
      //tim=0输出格式示例: -23°59' 48.23"
      //tim=1输出格式示例: 18h 29m 44.52s
      var s = "+";
      var w1 = "°", w2 = "’", w3 = "”";
      if (d < 0) d = -d, s = '-';
      if (formate) {
        d *= 12 / Math.PI;
        w1 = "h ", w2 = "m ", w3 = "s ";
      } else {
        d *= 180 / Math.PI;
      }
      var a = Math.floor(d);
      d = (d - a) * 60;
      var b = Math.floor(d);
      d = (d - b) * 60;
      var c = Math.floor(d);
      d = (d - c) * 100;
      d = Math.floor(d + 0.5);
      if (d >= 100) d -= 100, c++;
      if (c >= 60) c -= 60, b++;
      if (b >= 60) b -= 60, a++;
      a = "  " + a, b = "0" + b, c = "0" + c, d = "0" + d;
      s += a.substr(a.length - 3, 3) + w1;
      s += b.substr(b.length - 2, 2) + w2;
      s += c.substr(c.length - 2, 2) + ".";
      s += d.substr(d.length - 2, 2) + w3;
      return s;
    },
    cos: function () {
      return Math.cos(this.rad);
    },
    sin: function () {
      return Math.sin(this.rad);
    },
    tan: function () {
      return Math.tan(this.rad);
    },
    add: function (rad) {
      this.rad = Angle.inPI2(this.rad + rad);
      return this;
    },
    sub: function (rad) {
      this.rad = Angle.inPI2(this.rad - rad);
      return this;
    },
    mul: function (rad) {
      this.rad = Angle.inPI2(this.rad * rad);
      return this;
    },
    div: function (rad) {
      this.rad = Angle.inPI2(this.rad * rad);
      return this;
    }
  };

  //---JDate------------------------------------------------------------------
  var JDate = this.WC.JDate = function (jd) {
    this.jd = jd;
  };

  JDate.J2000 = 2451545.0; //2000年前儒略日数(2000-1-1 12:00:00格林威治平时)
  JDate.DTS = [ // TD - UT1 计算表
    -4000, 108371.7, -13036.80, 392.000, 0.0000,
    -500, 17201.0, -627.82, 16.170, -0.3413,
    -150, 12200.6, -346.41, 5.403, -0.1593,
    150, 9113.8, -328.13, -1.647, 0.0377,
    500, 5707.5, -391.41, 0.915, 0.3145,
    900, 2203.4, -283.45, 13.034, -0.1778,
    1300, 490.1, -57.35, 2.085, -0.0072,
    1600, 120.0, -9.81, -1.532, 0.1403,
    1700, 10.2, -0.91, 0.510, -0.0370,
    1800, 13.4, -0.72, 0.202, -0.0193,
    1830, 7.8, -1.81, 0.416, -0.0247,
    1860, 8.3, -0.13, -0.406, 0.0292,
    1880, -5.4, 0.32, -0.183, 0.0173,
    1900, -2.3, 2.06, 0.169, -0.0135,
    1920, 21.2, 1.69, -0.304, 0.0167,
    1940, 24.2, 1.22, -0.064, 0.0031,
    1960, 33.2, 0.51, 0.231, -0.0109,
    1980, 51.0, 1.29, -0.026, 0.0032,
    2000, 63.87, 0.1, 0, 0,
    2005, 64.7, 0.4, 0, 0, //一次项记为x,则 10x=0.4秒/年*(2015-2005),解得x=0.4
    2015, 69, 0, 0, 0];


  JDate.dt = function (year) { //力学时和世界时之间的精确差值 ΔT = TD - UT
    var dts = JDate.DTS, i, t1, t2, t3, dt = 0;
    if ((year >= -4000) && (year < 2015)) {
      for (i = 0; i < dts.length; i += 5) {
        if (year < dts[i + 5]) {
          t1 = (year - dts[i]) / (dts[i + 5] - dts[i]) * 10;
          t2 = t1 * t1;
          t3 = t2 * t1;
          dt = dts[i + 1] + dts[i + 2] * t1 + dts[i + 3] * t2 + dts[i + 4] * t3;
          break;
        }
      }
    } else {
      var jsd = 31; //sjd是y1年之后的加速度估计。瑞士星历表jsd=31,NASA网站jsd=32,skmap的jsd=29
      var dy = (year - 1820) / 100;
      if (year > 2015 + 100) {
        dt = -20 + jsd * dy * dy;
      } else {
        var v = -20 + jsd * dy * dy;
        dy = (2015 - 1820) / 100;
        var dv = -20 + jsd * dy * dy - 69;
        dt = v - dv * (2015 + 100 - year) / 100;
      }
    }
    return dt;
  };

  JDate.dt2 = function (jd) { //传入儒略日(J2000起算),计算UTC与原子时的差(单位:日)
    return JDate.dt(jd / 365.2425 + 2000) / 86400.0;
  };

  JDate.gd2jd = function (Y, M, D, h, m, s) {
    var jd = 0;
    Y = Y || 2000;
    M = M || 1;
    D = D || 1;
    h = h || 0;
    m = m || 0;
    s = s || 0;
    D += (h + m / 60 + s / 3600) / 24;
    var a = 0, b = 0;
    if (M <= 2) {
      M += 12;
      Y -= 1;
    }
    if (Y * 372 + M * 31 + int(D) >= 588829) {
      a = int(Y / 100);
      b = 2 - a + int(a / 4);
    }
    jd = int(365.25 * (Y + 4716)) + int(30.6001 * (M + 1)) + D + b - 1524.5;
    //if (UTC = 1) jd += JDate.dt(Y);
    return jd;
  };

  JDate.jd2gd = function (jd) { //儒略日数转公历,UTC=1表示目标公历是UTC
    var gd = {};
    //if (UTC = 1) jd -= JDate.dt2(jd - JDate.J2000);
    jd += 0.5;
    var A = int(jd), F = jd - A, D; //取得日数的整数部份A及小数部分F
    if (A > 2299161) {
      D = int((A - 1867216.25) / 36524.25), A += 1 + D - int(D / 4)
    }
    ;
    A += 1524; //向前移4年零2个月
    gd.Y = int((A - 122.1) / 365.25);//年
    D = A - int(365.25 * gd.Y); //去除整年日数后余下日数
    gd.M = int(D / 30.6001);    //月数
    gd.D = D - int(gd.M * 30.6001);//去除整月日数后余下日数
    gd.Y -= 4716;
    gd.M--;
    if (gd.M > 12) gd.M -= 12;
    if (gd.M <= 2) gd.Y++;
    //日的小数转为时分秒
    F *= 24;
    gd.h = int(F);
    F -= gd.h;
    F *= 60;
    gd.m = int(F);
    F -= gd.m;
    F *= 60;
    gd.s = int(F * 100) / 100;
    return gd;
  };

  JDate.Dint_dec = function (jd, shiqu, int_dec) { //算出:jd转到当地UTC后,UTC日数的整数部分或小数部分
    //基于J2000力学时jd的起算点是12:00:00时,所以跳日时刻发生在12:00:00,这与日历计算发生矛盾
    //把jd改正为00:00:00起算,这样儒略日的跳日动作就与日期的跳日同步
    //改正方法为jd=jd+0.5-deltatT+shiqu/24
    //把儒略日的起点移动-0.5(即前移12小时)
    //式中shiqu是时区,北京的起算点是-8小时,shiqu取8
    var u = jd + 0.5 - JDate.dt2(jd) + shiqu / 24;
    if (int_dec) {
      return Math.floor(u); //返回整数部分
    } else {
      return u - Math.floor(u);   //返回小数部分
    }
  };

  JDate.gd = function (Y, M, D, h, m, s) {
    return new JDate(JDate.gd2jd(Y, M, D, h, m, s));
  };

  JDate.jd = function (jd) {
    return new JDate(jd);
  };

  JDate.utc = function (Y, M, D, h, m, s) {
    return new JDate(JDate.gd2jd(Y, M, D, h, m, s) + JDate.dt(Y));
  };

  JDate.prototype = {
    toJM: function () {
      return (this.jd - JDate.J2000) / 365250;
    },
    toJC: function () {
      return (this.jd - JDate.J2000) / 36525;
    },
    valueOf: function () {
      return this.jd;
    },
    toString: function () {
      return this.jd + "";
    },
    add: function (jd) {
      this.jd = this.jd + jd;
      return this;
    },
    sub: function (jd) {
      this.jd = this.jd - jd;
      return this;
    },
    mul: function (jd) {
      this.jd = this.jd * jd;
      return this;
    },
    div: function () {
      this.jd = this.jd / jd;
      return this;
    },
    toStr: function () {//日期转为串
      var d = JDate.jd2gd(this.jd);
      var Y = "   " + d.Y, M = "0" + d.M, D = "0" + d.D;
      var h = d.h, m = d.m, s = Math.floor(d.s + .5);
      if (s >= 60) s -= 60, m++;
      if (m >= 60) m -= 60, h++;
      h = "0" + h;
      m = "0" + m;
      s = "0" + s;
      Y = Y.substr(Y.length - 5, 5);
      M = M.substr(M.length - 2, 2);
      D = D.substr(D.length - 2, 2);
      h = h.substr(h.length - 2, 2);
      m = m.substr(m.length - 2, 2);
      s = s.substr(s.length - 2, 2);
      return Y + "-" + M + "-" + D + " " + h + ":" + m + ":" + s;
    },
    toUTC: function () {
      var d = JDate.jd2gd(this.jd - JDate.dt2(this.jd - JDate.J2000));
      var Y = "   " + d.Y, M = "0" + d.M, D = "0" + d.D;
      var h = d.h, m = d.m, s = Math.floor(d.s + .5);
      if (s >= 60) s -= 60, m++;
      if (m >= 60) m -= 60, h++;
      h = "0" + h;
      m = "0" + m;
      s = "0" + s;
      Y = Y.substr(Y.length - 5, 5);
      M = M.substr(M.length - 2, 2);
      D = D.substr(D.length - 2, 2);
      h = h.substr(h.length - 2, 2);
      m = m.substr(m.length - 2, 2);
      s = s.substr(s.length - 2, 2);
      return Y + "-" + M + "-" + D + " " + h + ":" + m + ":" + s;
    }
  };

  //=========黄赤交角及黄赤坐标变换===========
  var Coord = WC.Coord = function () {
    this.e1 = Angle.rad(0);
    this.e2 = Angle.rad(0);
    this.e3 = 0;
  };

  Coord.OBLS = [84381.448, -46.8150, -0.00059, 0.001813];//黄赤交角系数表
  Coord.PRE_P03 = {
    fi: [0, 5038.481507, -1.0790069, -0.00114045, +0.000132851, -9.51e-8], //fi黄经岁差
    w: [84381.406000, -0.025754, +0.0512623, -0.00772503, -4.67e-7, +3.337e-7], //w瞬时平赤面与历元黄面交角
    P: [0, 4.199094, +0.1939873, -0.00022466, -9.12e-7, +1.20e-8], //P
    Q: [0, -46.811015, +0.0510283, +0.00052413, -6.46e-7, -1.72e-8], //Q
    E: [84381.406000, -46.836769, -0.0001831, +0.00200340, -5.76e-7, -4.34e-8], //E瞬时平赤面与瞬时黄面交角（平黄赤交角）
    x: [0, 10.556403, -2.3814292, -0.00121197, +0.000170663, -5.60e-8], //x赤经岁差
    pi: [0, 46.998973, -0.0334926, -0.00012559, +1.13e-7, -2.2e-9],  //pi
    II: [629546.7936, -867.95758, +0.157992, -0.0005371, -0.00004797, +7.2e-8],  //II
    p: [0, 5028.796195, +1.1054348, +0.00007964, -0.000023857, +3.83e-8], //p
    th: [0, 2004.191903, -0.4294934, -0.04182264, -7.089e-6, -1.274e-7], //th
    Z: [2.650545, 2306.083227, +0.2988499, +0.01801828, -5.971e-6, -3.173e-7], //Z
    z: [-2.650545, 2306.077181, +1.0927348, +0.01826837, -0.000028596, -2.904e-7] //z
  };
  //Coord.PRES = [0, 50287.92262, 111.24406, 0.07699, -0.23479, -0.00178, 0.00018, 0.00001];//Date黄道上的岁差p iau2000
  Coord.ABE_E = [0.016708634, -0.000042037, -0.0000001267]; //离心率
  Coord.ABE_P = [102.93735 / Angle.R2D, 1.71946 / Angle.R2D, 0.00046 / Angle.R2D]; //近点
  Coord.ABE_L = [280.4664567 / Angle.R2D, 36000.76982779 / Angle.R2D, 0.0003032028 / Angle.R2D, 1 / 49931000 / Angle.R2D, -1 / 153000000 / Angle.R2D]; //太平黄经
  Coord.ABE_K = 20.49552 / Angle.R2A; //光行差常数
  Coord.NUTS = [//章动表
    2.1824391966, -33.757045954, 0.0000362262, 3.7340E-08, -2.8793E-10, -171996, -1742, 92025, 89,
    3.5069406862, 1256.663930738, 0.0000105845, 6.9813E-10, -2.2815E-10, -13187, -16, 5736, -31,
    1.3375032491, 16799.418221925, -0.0000511866, 6.4626E-08, -5.3543E-10, -2274, -2, 977, -5,
    4.3648783932, -67.514091907, 0.0000724525, 7.4681E-08, -5.7586E-10, 2062, 2, -895, 5,
    0.0431251803, -628.301955171, 0.0000026820, 6.5935E-10, 5.5705E-11, -1426, 34, 54, -1,
    2.3555557435, 8328.691425719, 0.0001545547, 2.5033E-07, -1.1863E-09, 712, 1, -7, 0,
    3.4638155059, 1884.965885909, 0.0000079025, 3.8785E-11, -2.8386E-10, -517, 12, 224, -6,
    5.4382493597, 16833.175267879, -0.0000874129, 2.7285E-08, -2.4750E-10, -386, -4, 200, 0,
    3.6930589926, 25128.109647645, 0.0001033681, 3.1496E-07, -1.7218E-09, -301, 0, 129, -1,
    3.5500658664, 628.361975567, 0.0000132664, 1.3575E-09, -1.7245E-10, 217, -5, -95, 3];
  Coord.NUTB = [//中精度章动计算表
    2.1824, -33.75705, 36e-6, -1720, 920,
    3.5069, 1256.66393, 11e-6, -132, 57,
    1.3375, 16799.4182, -51e-6, -23, 10,
    4.3649, -67.5141, 72e-6, 21, -9,
    0.04, -628.302, 0, -14, 0,
    2.36, 8328.691, 0, 7, 0,
    3.46, 1884.966, 0, -5, 2,
    5.44, 16833.175, 0, -4, 2,
    3.69, 25128.110, 0, -3, 0,
    3.55, 628.362, 0, 2, 0];

  Coord.obl = function (jd) { //返回黄赤交角(常规精度),短期精度很高
    var t1 = jd.toJC(), t2 = t1 * t1, t3 = t2 * t1;
    return Angle.arc(Coord.OBLS[0] + Coord.OBLS[1] * t1 + Coord.OBLS[2] * t2 + Coord.OBLS[3] * t3);
  };
  Coord.trans = function (coord, e) { //黄赤转换(黄赤坐标旋转)
    //黄道赤道坐标变换,赤到黄e取负
    var sinE = Math.sin(e), cosE = Math.cos(e);
    var e2 = Math.asin(cosE * coord.e2.sin() + sinE * coord.e2.cos() * coord.e1.sin());
    var e1 = Math.atan2(coord.e1.sin() * cosE - coord.e2.tan() * sinE, coord.e1.cos());
    coord.e1 = Angle.rad(e1);
    coord.e2 = Angle.rad(e2);
  };
  Coord.prece = function (jd, sc) { //t是儒略世纪数,sc是岁差量名称,mx是模型
    var i, tn = 1, c = 0, p, t = jd.toJC();
    p = Coord.PRE_P03[sc];
    for (i = 0; i < p.length; i++, tn *= t) {
      c += p[i] * tn;
    }
    return c / Angle.R2A;
  };
  Coord.rePre = function (jd, coord) { //岁差
    //coord.e1.add(Coord.prece(jd, 'fi'));
//    var i, t = 1, v = 0, t1 = jd.toJM();
//    for (i = 1; i < 8; i++) {
//      t *= t1;
//      v += Coord.PRES[i] * t;
//    }
//    coord.e1.add((v + 2.9965 * t1) / Angle.R2A);
  };
  Coord.reAbe = function (jd, coord) { //光行差 //恒星周年光行差计算(黄道坐标中)
    var t1 = jd.toJC(), t2 = t1 * t1, t3 = t2 * t1, t4 = t3 * t1;
    var L = Coord.ABE_L[0] + Coord.ABE_L[1] * t1 + Coord.ABE_L[2] * t2 + Coord.ABE_L[3] * t3 + Coord.ABE_L[4] * t4;
    var p = Coord.ABE_P[0] + Coord.ABE_P[1] * t1 + Coord.ABE_P[2] * t2;
    var e = Coord.ABE_E[0] + Coord.ABE_E[1] * t1 + Coord.ABE_E[2] * t2;
    var dL = L - coord.e1, dP = p - coord.e1;
    coord.e1.sub(Coord.ABE_K * (Math.cos(dL) - e * Math.cos(dP)) / coord.e2.cos());
    coord.e2.sub(Coord.ABE_K * coord.e2.sin() * (Math.sin(dL) - e * Math.sin(dP)));
  };
  Coord.nutB = function (jd) { //中精度章动计算,t是世纪数
    var i, c, a, t = jd.toJC(), t2 = t * t, B = Coord.NUTB, d = {Lon: 0, Obl: 0};
    for (i = 0; i < B.length; i += 5) {
      c = B[i] + B[i + 1] * t + B[i + 2] * t2;
      if (i == 0) a = -1.742 * t; else a = 0;
      d.Lon += (B[i + 3] + a) * Math.sin(c);
      d.Obl += B[i + 4] * Math.cos(c);
    }
    d.Lon /= Angle.R2A * 100; //黄经章动
    d.Obl /= Angle.R2A * 100; //交角章动
    return d; //黄经章动,交角章动
  };
  Coord.reNut = function (jd) { //计算黄经章动及交角章动
//    var d = {Lon: 0, Obl: 0};
//    var t = jd.toJC();
//    var i, c, t1 = t, t2 = t1 * t1, t3 = t2 * t1, t4 = t3 * t1, t5 = t4 * t1;
//    for (i = 0; i < Coord.NUTS.length; i += 9) {
//      c = Coord.NUTS[i] + Coord.NUTS[i + 1] * t1 + Coord.NUTS[i + 2] * t2 + Coord.NUTS[i + 3] * t3 + Coord.NUTS[i + 4] * t4;
//      d.Lon += (Coord.NUTS[i + 5] + Coord.NUTS[i + 6] * t / 10) * Math.sin(c); //黄经章动
//      d.Obl += (Coord.NUTS[i + 7] + Coord.NUTS[i + 8] * t / 10) * Math.cos(c); //交角章动
//    }
//    d.Lon /= Angle.R2A * 10000; //黄经章动
//    d.Obl /= Angle.R2A * 10000; //交角章动
    return Coord.nutB(jd);
  };
  Coord.nutationRaDec = function (jd, coord) { //本函数计算赤经章动及赤纬章动
    var Ra = coord.e1, Dec = coord.e2;
    var E = Coord.obl(jd), sinE = Math.sin(E), cosE = Math.cos(E); //计算黄赤交角
    var d = Coord.reNut(jd);                 //计算黄经章动及交角章动
    var cosRa = Math.cos(Ra), sinRa = Math.sin(Ra);
    var tanDec = Math.tan(Dec);
    Coord.e1.add((cosE + sinE * sinRa * tanDec) * d.Lon - cosRa * tanDec * d.Obl); //赤经章动
    Coord.e2.add(sinE * cosRa * d.Lon + sinRa * d.Obl);  //赤纬章动
  };


  //=========黄赤交角及黄赤坐标变换===========

//=================以下是月球及地球运动参数表===================
  /***************************************
   * 如果用记事本查看此代码,请在"格式"菜单中去除"自动换行"
   * E10是关于地球的,格式如下:
   *  它是一个数组,每3个数看作一条记录,每条记录的3个数记为A,B,C
   *  rec=A*cos(B+C*t); 式中t是J2000起算的儒略千年数
   *  每条记录的计算结果(即rec)取和即得地球的日心黄经的周期量L0
   * E11格式如下: rec = A*cos*(B+C*t) *t,   取和后得泊松量L1
   * E12格式如下: rec = A*cos*(B+C*t) *t*t,  取和后得泊松量L2
   * E13格式如下: rec = A*cos*(B+C*t) *t*t*t, 取和后得泊松量L3
   * 最后地球的地心黄经:L = L0+L1+L2+L3+...
   * E20,E21,E22,E23...用于计算黄纬
   * M10,M11等是关于月球的,参数的用法请阅读Mnn()函数
   *****************************************/
var L0 = [
    175347046.0, 0.0000000, 0.0000000,
    3341656.0, 4.6692568, 6283.0758500,
    34894.0, 4.6261000, 12566.1517000,
    3497.0, 2.7441000, 5753.3849000,
    3418.0, 2.8289000, 3.5231000,
    3136.0, 3.6277000, 77713.7715000,
    2676.0, 4.4181000, 7860.4194000,
    2343.0, 6.1352000, 3930.2097000,
    1324.0, 0.7425000, 11506.7698000,
    1273.0, 2.0371000, 529.6910000,
    1199.0, 1.1096000, 1577.3435000,
    990.0, 5.2330000, 5884.9270000,
    902.0, 2.0450000, 26.2980000,
    857.0, 3.5080000, 398.1490000,
    780.0, 1.1790000, 5223.6940000,
    753.0, 2.5330000, 5507.5530000,
    505.0, 4.5830000, 18849.2280000,
    492.0, 4.2050000, 775.5230000,
    357.0, 2.9200000,0.0670000,
    317.0, 5.8490000, 11790.6290000,
    284.0, 1.8990000, 796.2880000,
    271.0, 0.3150000, 10977.0790000,
    243.0, 0.3450000, 5486.7780000,
    206.0, 4.8060000, 2544.3140000,
    205.0, 1.8690000, 5573.1430000,
    202.0, 2.4580000, 6069.7770000,
    156.0, 0.8330000, 213.2990000,
    132.0, 3.4110000, 2942.4630000,
    126.0, 1.0830000, 20.7750000,
    115.0, 0.6450000,0.9800000,
    103.0, 0.6360000, 4694.0030000,
    102.0, 0.9760000, 15720.8390000,
    102.0, 4.2670000, 7.1140000,
    99.0, 6.2100000, 2146.1700000,
    98.0, 0.6800000, 155.4200000,
    86.0, 5.9800000, 161000.6900000,
    85.0, 1.3000000, 6275.9600000,
    85.0, 3.6700000, 71430.7000000,
    80.0, 1.8100000, 17260.1500000,
    79.0, 3.0400000, 12036.4600000,
    75.0, 1.7600000, 5088.6300000,
    74.0, 3.5000000, 3154.6900000,
    74.0, 4.6800000, 801.8200000,
    70.0, 0.8300000, 9437.7600000,
    62.0, 3.9800000, 8827.3900000,
    61.0, 1.8200000, 7084.9000000,
    57.0, 2.7800000, 6286.6000000,
    56.0, 4.3900000, 14143.5000000,
    56.0, 3.4700000, 6279.5500000,
    52.0, 0.1900000, 12139.5500000,
    52.0, 1.3300000, 1748.0200000,
    51.0, 0.2800000, 5856.4800000,
    49.0, 0.4900000, 1194.4500000,
    41.0, 5.3700000, 8429.2400000,
    41.0, 2.4000000, 19651.0500000,
    39.0, 6.1700000, 10447.3900000,
    37.0, 6.0400000, 10213.2900000,
    37.0, 2.5700000, 1059.3800000,
    36.0, 1.7100000, 2352.8700000,
    36.0, 1.7800000, 6812.7700000,
    33.0, 0.5900000, 17789.8500000,
    30.0, 0.4400000, 83996.8500000,
    30.0, 2.7400000, 1349.8700000,
    25.0, 3.1600000, 4690.4800000 ];
  var L1 = [
    628331966747.0, 0.000000, 0.0000000,
    206059.0, 2.678235, 6283.0758500,
    4303.0, 2.635100, 12566.1517000,
    425.0, 1.590000, 3.5230000,
    119.0, 5.796000, 26.2980000,
    109.0, 2.966000, 1577.3440000,
    93.0, 2.590000, 18849.2300000,
    72.0, 1.140000, 529.6900000,
    68.0, 1.870000, 398.1500000,
    67.0, 4.410000, 5507.5500000,
    59.0, 2.890000, 5223.6900000,
    56.0, 2.170000, 155.4200000,
    45.0, 0.400000, 796.3000000,
    36.0, 0.470000, 775.5200000,
    29.0, 2.650000, 7.1100000,
    21.0, 5.430000, 0.9800000,
    19.0, 1.850000, 5486.7800000,
    19.0, 4.970000, 213.3000000,
    17.0, 2.990000, 6275.9600000,
    16.0, 0.030000, 2544.3100000,
    16.0, 1.430000, 2146.1700000,
    15.0, 1.210000, 10977.0800000,
    12.0, 2.830000, 1748.0200000,
    12.0, 3.260000, 5088.6300000,
    12.0, 5.270000, 1194.4500000,
    12.0, 2.080000, 4694.0000000,
    11.0, 0.770000, 553.5700000,
    10.0, 1.300000, 6286.6000000,
    10.0, 4.240000, 1349.8700000,
    9.0, 2.700000, 242.7300000,
    9.0, 5.640000, 951.7200000,
    8.0, 5.300000, 2352.8700000,
    6.0, 2.650000, 9437.7600000,
    6.0, 4.670000, 4690.4800000
  ];
  var L2 = [
    52919.0, 0.0000, 0.0000,
    8720.0, 1.0721, 6283.0758,
    309.0, 0.8670, 12566.1520,
    27.0, 0.0500, 3.5200,
    16.0, 5.1900, 26.3000,
    16.0, 3.6800, 155.4200,
    10.0, 0.7600, 18849.2300,
    9.0, 2.0600, 77713.7700,
    7.0, 0.8300, 775.5200,
    5.0, 4.6600, 1577.3400,
    4.0, 1.0300, 7.1100,
    4.0, 3.4400, 5573.1400,
    3.0, 5.1400, 796.3000,
    3.0, 6.0500, 5507.5500,
    3.0, 1.1900, 242.7300,
    3.0, 6.1200, 529.6900,
    3.0, 0.3100, 398.1500,
    3.0, 2.2800, 553.5700,
    2.0, 4.3800, 5223.6900,
    2.0, 3.7500, 0.9800 ];
  var L3 = [
    289.0, 5.844, 6283.076,
    35.0, 0.000, 0.000,
    17.0, 5.490, 12566.150,
    3.0, 5.200, 155.420,
    1.0, 4.720, 3.520,
    1.0, 5.300, 18849.230,
    1.0, 5.970, 242.730
  ];
  var L4 = [ 114.0, 3.142, 0.00,
    8.0, 4.130, 6283.08,
    1.0, 3.840, 12566.15 ];
  var L5 = [ 1.0, 3.14, 0.0 ];

  var B0 = [ 280.0, 3.199, 84334.662,
    102.0, 5.422, 5507.553,
    80.0, 3.880, 5223.690,
    44.0, 3.700, 2352.870,
    32.0, 4.000, 1577.340
  ];
  var B1 = [
    9.0, 3.90, 5507.55,
    6.0, 1.73, 5223.69
  ];
  var B2 = [
    22378.0, 3.38509, 10213.28555,
    282.0, 0.00000, 0.00000,
    173.0, 5.25600, 20426.57100,
    27.0, 3.87000, 30639.86000
  ];
  var B3 = [
    647.0, 4.992, 10213.286,
    20.0, 3.140, 0.000,
    6.0, 0.770, 20426.570,
    3.0, 5.440, 30639.860
  ];
  var B4 = [ 14.0, 0.32, 10213.29];

  var R0 = [
    100013989, 0   , 0    ,
    1670700 , 3.0984635, 6283.0758500,
    13956  , 3.05525, 12566.15170,
    3084   , 5.1985 , 77713.7715,
    1628   , 1.1739 , 5753.3849,
    1576   , 2.8469 , 7860.4194,
    925   , 5.453 , 11506.770,
    542   , 4.564 , 3930.210 ,
    472   , 3.661 , 5884.927 ,
    346   , 0.964 , 5507.553 ,
    329   , 5.900 , 5223.694 ,
    307   , 0.299 , 5573.143 ,
    243   , 4.273 , 11790.629,
    212   , 5.847 , 1577.344 ,
    186   , 5.022 , 10977.079 ,
    175   , 3.012 , 18849.228 ,
    110   , 5.055 , 5486.778 ,
    98    , 0.89  , 6069.78 ,
    86    , 5.69  , 15720.84 ,
    86    , 1.27  , 161000.69 ,
    65    , 0.27  , 17260.15 ,
    63    , 0.92  , 529.69  ,
    57    , 2.01  , 83996.85 ,
    56    , 5.24  , 71430.70 ,
    49    , 3.25  , 2544.31  ,
    47    , 2.58  , 775.52  ,
    45    , 5.54  , 9437.76  ,
    43    , 6.01  , 6275.96  ,
    39    , 5.36  , 4694.00  ,
    38    , 2.39  , 8827.39  ,
    37    , 0.83  , 19651.05 ,
    37    , 4.90  , 12139.55 ,
    36    , 1.67  , 12036.46 ,
    35    , 1.84  , 2942.46  ,
    33    , 0.24  , 7084.90  ,
    32    , 0.18  , 5088.63  ,
    32    , 1.78  , 398.15  ,
    28    , 1.21  , 6286.60  ,
    28    , 1.90  , 6279.55  ,
    26    , 4.59  , 10447.39 ];

  var R1 = [
    103019, 1.107490, 6283.075850,
    1721 , 1.0644 , 12566.1517,
    702 , 3.142 , 0    ,
    32  , 1.02  , 18849.23 ,
    31  , 2.84  , 5507.55 ,
    25  , 1.32  , 5223.69 ,
    18  , 1.42  , 1577.34 ,
    10 , 5.91  , 10977.08 ,
    9  , 1.42  , 6275.96 ,
    9  , 0.27  , 5486.78
  ];
  var R2 = [
    4359, 5.7846, 6283.0758,
    124, 5.579 , 12566.152,
    12 , 3.14 , 0   ,
    9 , 3.63 , 77713.77,
    6 , 1.87 , 5573.14,
    3 , 5.47 , 18849.23
  ];
  var R3 = [
    145, 4.273, 6283.076,
    7, 3.92, 12566.15
  ];
  var R4 = [ 4, 2.56, 6283.08 ];


//地球运动VSOP87参数
  var E10 = [ //黄经周期项
    1.75347045673, 0.00000000000, 0.0000000000, 0.03341656456, 4.66925680417, 6283.0758499914, 0.00034894275, 4.62610241759, 12566.1516999828, 0.00003417571, 2.82886579606, 3.5231183490,
    0.00003497056, 2.74411800971, 5753.3848848968, 0.00003135896, 3.62767041758, 77713.7714681205, 0.00002676218, 4.41808351397, 7860.4193924392, 0.00002342687, 6.13516237631, 3930.2096962196,
    0.00001273166, 2.03709655772, 529.6909650946, 0.00001324292, 0.74246356352, 11506.7697697936, 0.00000901855, 2.04505443513, 26.2983197998, 0.00001199167, 1.10962944315, 1577.3435424478,
    0.00000857223, 3.50849156957, 398.1490034082, 0.00000779786, 1.17882652114, 5223.6939198022, 0.00000990250, 5.23268129594, 5884.9268465832, 0.00000753141, 2.53339053818, 5507.5532386674,
    0.00000505264, 4.58292563052, 18849.2275499742, 0.00000492379, 4.20506639861, 775.5226113240, 0.00000356655, 2.91954116867, 0.0673103028, 0.00000284125, 1.89869034186, 796.2980068164,
    0.00000242810, 0.34481140906, 5486.7778431750, 0.00000317087, 5.84901952218, 11790.6290886588, 0.00000271039, 0.31488607649, 10977.0788046990, 0.00000206160, 4.80646606059, 2544.3144198834,
    0.00000205385, 1.86947813692, 5573.1428014331, 0.00000202261, 2.45767795458, 6069.7767545534, 0.00000126184, 1.08302630210, 20.7753954924, 0.00000155516, 0.83306073807, 213.2990954380,
    0.00000115132, 0.64544911683, 0.9803210682, 0.00000102851, 0.63599846727, 4694.0029547076, 0.00000101724, 4.26679821365, 7.1135470008, 0.00000099206, 6.20992940258, 2146.1654164752,
    0.00000132212, 3.41118275555, 2942.4634232916, 0.00000097607, 0.68101272270, 155.4203994342, 0.00000085128, 1.29870743025, 6275.9623029906, 0.00000074651, 1.75508916159, 5088.6288397668,
    0.00000101895, 0.97569221824, 15720.8387848784, 0.00000084711, 3.67080093025, 71430.6956181291, 0.00000073547, 4.67926565481, 801.8209311238, 0.00000073874, 3.50319443167, 3154.6870848956,
    0.00000078756, 3.03698313141, 12036.4607348882, 0.00000079637, 1.80791330700, 17260.1546546904, 0.00000085803, 5.98322631256, 161000.6857376741, 0.00000056963, 2.78430398043, 6286.5989683404,
    0.00000061148, 1.81839811024, 7084.8967811152, 0.00000069627, 0.83297596966, 9437.7629348870, 0.00000056116, 4.38694880779, 14143.4952424306, 0.00000062449, 3.97763880587, 8827.3902698748,
    0.00000051145, 0.28306864501, 5856.4776591154, 0.00000055577, 3.47006009062, 6279.5527316424, 0.00000041036, 5.36817351402, 8429.2412664666, 0.00000051605, 1.33282746983, 1748.0164130670,
    0.00000051992, 0.18914945834, 12139.5535091068, 0.00000049000, 0.48735065033, 1194.4470102246, 0.00000039200, 6.16832995016, 10447.3878396044, 0.00000035566, 1.77597314691, 6812.7668150860,
    0.00000036770, 6.04133859347, 10213.2855462110, 0.00000036596, 2.56955238628, 1059.3819301892, 0.00000033291, 0.59309499459, 17789.8456197850, 0.00000035954, 1.70876111898, 2352.8661537718];
  var E11 = [ //黄经泊松1项
    6283.31966747491, 0.00000000000, 0.0000000000, 0.00206058863, 2.67823455584, 6283.0758499914, 0.00004303430, 2.63512650414, 12566.1516999828, 0.00000425264, 1.59046980729, 3.5231183490,
    0.00000108977, 2.96618001993, 1577.3435424478, 0.00000093478, 2.59212835365, 18849.2275499742, 0.00000119261, 5.79557487799, 26.2983197998, 0.00000072122, 1.13846158196, 529.6909650946,
    0.00000067768, 1.87472304791, 398.1490034082, 0.00000067327, 4.40918235168, 5507.5532386674, 0.00000059027, 2.88797038460, 5223.6939198022, 0.00000055976, 2.17471680261, 155.4203994342,
    0.00000045407, 0.39803079805, 796.2980068164, 0.00000036369, 0.46624739835, 775.5226113240, 0.00000028958, 2.64707383882, 7.1135470008, 0.00000019097, 1.84628332577, 5486.7778431750,
    0.00000020844, 5.34138275149, 0.9803210682, 0.00000018508, 4.96855124577, 213.2990954380, 0.00000016233, 0.03216483047, 2544.3144198834, 0.00000017293, 2.99116864949, 6275.9623029906];
  var E12 = [ //黄经泊松2项
    0.00052918870, 0.00000000000, 0.0000000000, 0.00008719837, 1.07209665242, 6283.0758499914, 0.00000309125, 0.86728818832, 12566.1516999828, 0.00000027339, 0.05297871691, 3.5231183490,
    0.00000016334, 5.18826691036, 26.2983197998, 0.00000015752, 3.68457889430, 155.4203994342, 0.00000009541, 0.75742297675, 18849.2275499742, 0.00000008937, 2.05705419118, 77713.7714681205,
    0.00000006952, 0.82673305410, 775.5226113240, 0.00000005064, 4.66284525271, 1577.3435424478];
  var E13 = [0.00000289226, 5.84384198723, 6283.0758499914, 0.00000034955, 0.00000000000, 0.0000000000, 0.00000016819, 5.48766912348, 12566.1516999828];
  var E14 = [0.00000114084, 3.14159265359, 0.0000000000, 0.00000007717, 4.13446589358, 6283.0758499914, 0.00000000765, 3.83803776214, 12566.1516999828];
  var E15 = [0.00000000878, 3.14159265359, 0.0000000000];
  var E20 = [ //黄纬周期项
    0.00000279620, 3.19870156017, 84334.6615813083, 0.00000101643, 5.42248619256, 5507.5532386674, 0.00000080445, 3.88013204458, 5223.6939198022, 0.00000043806, 3.70444689758, 2352.8661537718,
    0.00000031933, 4.00026369781, 1577.3435424478, 0.00000022724, 3.98473831560, 1047.7473117547, 0.00000016392, 3.56456119782, 5856.4776591154, 0.00000018141, 4.98367470263, 6283.0758499914,
    0.00000014443, 3.70275614914, 9437.7629348870, 0.00000014304, 3.41117857525, 10213.2855462110];
  var E21 = [0.00000009030, 3.89729061890, 5507.5532386674, 0.00000006177, 1.73038850355, 5223.6939198022];
  var E30 = [ //距离周期项
    1.00013988799, 0.00000000000, 0.0000000000, 0.01670699626, 3.09846350771, 6283.0758499914, 0.00013956023, 3.05524609620, 12566.1516999828, 0.00003083720, 5.19846674381, 77713.7714681205,
    0.00001628461, 1.17387749012, 5753.3848848968, 0.00001575568, 2.84685245825, 7860.4193924392, 0.00000924799, 5.45292234084, 11506.7697697936, 0.00000542444, 4.56409149777, 3930.2096962196];
  var E31 = [0.00103018608, 1.10748969588, 6283.0758499914, 0.00001721238, 1.06442301418, 12566.1516999828, 0.00000702215, 3.14159265359, 0.0000000000];
  var E32 = [0.00004359385, 5.78455133738, 6283.0758499914];
  var E33 = [0.00000144595, 4.27319435148, 6283.0758499914];
//月球运动参数
  var M10 = [
    22639.5858800, 2.3555545723, 8328.6914247251, 1.5231275E-04, 2.5041111E-07, -1.1863391E-09, 4586.4383203, 8.0413790709, 7214.0628654588, -2.1850087E-04, -1.8646419E-07, 8.7760973E-10, 2369.9139357, 10.3969336431, 15542.7542901840, -6.6188121E-05, 6.3946925E-08, -3.0872935E-10, 769.0257187, 4.7111091445, 16657.3828494503, 3.0462550E-04, 5.0082223E-07, -2.3726782E-09,
    -666.4175399, -0.0431256817, 628.3019552485, -2.6638815E-06, 6.1639211E-10, -5.4439728E-11, -411.5957339, 3.2558104895, 16866.9323152810, -1.2804259E-04, -9.8998954E-09, 4.0433461E-11, 211.6555524, 5.6858244986, -1114.6285592663, -3.7081362E-04, -4.3687530E-07, 2.0639488E-09, 205.4359530, 8.0845047526, 6585.7609102104, -2.1583699E-04, -1.8708058E-07, 9.3204945E-10,
    191.9561973, 12.7524882154, 23871.4457149091, 8.6124629E-05, 3.1435804E-07, -1.4950684E-09, 164.7286185, 10.4400593249, 14914.4523349355, -6.3524240E-05, 6.3330532E-08, -2.5428962E-10, -147.3213842, -2.3986802540, -7700.3894694766, -1.5497663E-04, -2.4979472E-07, 1.1318993E-09, -124.9881185, 5.1984668216, 7771.3771450920, -3.3094061E-05, 3.1973462E-08, -1.5436468E-10,
    -109.3803637, 2.3124288905, 8956.9933799736, 1.4964887E-04, 2.5102751E-07, -1.2407788E-09, 55.1770578, 7.1411231536, -1324.1780250970, 6.1854469E-05, 7.3846820E-08, -3.4916281E-10, -45.0996092, 5.6113650618, 25195.6237400061, 2.4270161E-05, 2.4051122E-07, -1.1459056E-09, 39.5333010, -0.9002559173, -8538.2408905558, 2.8035534E-04, 2.6031101E-07, -1.2267725E-09,
    38.4298346, 18.4383127140, 22756.8171556428, -2.8468899E-04, -1.2251727E-07, 5.6888037E-10, 36.1238141, 7.0666637168, 24986.0742741754, 4.5693825E-04, 7.5123334E-07, -3.5590172E-09, 30.7725751, 16.0827581417, 14428.1257309177, -4.3700174E-04, -3.7292838E-07, 1.7552195E-09, -28.3971008, 7.9982533891, 7842.3648207073, -2.2116475E-04, -1.8584780E-07, 8.2317000E-10,
    -24.3582283, 10.3538079614, 16171.0562454324, -6.8852003E-05, 6.4563317E-08, -3.6316908E-10, -18.5847068, 2.8429122493, -557.3142796331, -1.8540681E-04, -2.1843765E-07, 1.0319744E-09, 17.9544674, 5.1553411398, 8399.6791003405, -3.5757942E-05, 3.2589854E-08, -2.0880440E-10, 14.5302779, 12.7956138971, 23243.1437596606, 8.8788511E-05, 3.1374165E-07, -1.4406287E-09,
    14.3796974, 15.1080427876, 32200.1371396342, 2.3843738E-04, 5.6476915E-07, -2.6814075E-09, 14.2514576, -24.0810366320, -2.3011998397, 1.5231275E-04, 2.5041111E-07, -1.1863391E-09, 13.8990596, 20.7938672862, 31085.5085803679, -1.3237624E-04, 1.2789385E-07, -6.1745870E-10, 13.1940636, 3.3302699264, -9443.3199839914, -5.2312637E-04, -6.8728642E-07, 3.2502879E-09,
    -9.6790568, -4.7542348263, -16029.0808942018, -3.0728938E-04, -5.0020584E-07, 2.3182384E-09, -9.3658635, 11.2971895604, 24080.9951807398, -3.4654346E-04, -1.9636409E-07, 9.1804319E-10, 8.6055318, 5.7289501804, -1742.9305145148, -3.6814974E-04, -4.3749170E-07, 2.1183885E-09, -8.4530982, 7.5540213938, 16100.0685698171, 1.1921869E-04, 2.8238458E-07, -1.3407038E-09,
    8.0501724, 10.4831850066, 14286.1503796870, -6.0860358E-05, 6.2714140E-08, -1.9984990E-10, -7.6301553, 4.6679834628, 17285.6848046987, 3.0196162E-04, 5.0143862E-07, -2.4271179E-09, -7.4474952, -0.0862513635, 1256.6039104970, -5.3277630E-06, 1.2327842E-09, -1.0887946E-10, 7.3712011, 8.1276304344, 5957.4589549619, -2.1317311E-04, -1.8769697E-07, 9.8648918E-10,
    7.0629900, 0.9591375719, 33.7570471374, -3.0829302E-05, -3.6967043E-08, 1.7385419E-10, -6.3831491, 9.4966777258, 7004.5133996281, 2.1416722E-04, 3.2425793E-07, -1.5355019E-09, -5.7416071, 13.6527441326, 32409.6866054649, -1.9423071E-04, 5.4047029E-08, -2.6829589E-10, 4.3740095, 18.4814383957, 22128.5152003943, -2.8202511E-04, -1.2313366E-07, 6.2332010E-10,
    -3.9976134, 7.9669196340, 33524.3151647312, 1.7658291E-04, 4.9092233E-07, -2.3322447E-09, -3.2096876, 13.2398458924, 14985.4400105508, -2.5159493E-04, -1.5449073E-07, 7.2324505E-10, -2.9145404, 12.7093625336, 24499.7476701576, 8.3460748E-05, 3.1497443E-07, -1.5495082E-09, 2.7318890, 16.1258838235, 13799.8237756692, -4.3433786E-04, -3.7354477E-07, 1.8096592E-09,
    -2.5679459, -2.4418059357, -7072.0875142282, -1.5764051E-04, -2.4917833E-07, 1.0774596E-09, -2.5211990, 7.9551277074, 8470.6667759558, -2.2382863E-04, -1.8523141E-07, 7.6873027E-10, 2.4888871, 5.6426988169, -486.3266040178, -3.7347750E-04, -4.3625891E-07, 2.0095091E-09, 2.1460741, 7.1842488353, -1952.4799803455, 6.4518350E-05, 7.3230428E-08, -2.9472308E-10,
    1.9777270, 23.1494218585, 39414.2000050930, 1.9936508E-05, 3.7830496E-07, -1.8037978E-09, 1.9336825, 9.4222182890, 33314.7656989005, 6.0925100E-04, 1.0016445E-06, -4.7453563E-09, 1.8707647, 20.8369929680, 30457.2066251194, -1.2971236E-04, 1.2727746E-07, -5.6301898E-10, -1.7529659, 0.4873576771, -8886.0057043583, -3.3771956E-04, -4.6884877E-07, 2.2183135E-09,
    -1.4371624, 7.0979974718, -695.8760698485, 5.9190587E-05, 7.4463212E-08, -4.0360254E-10, -1.3725701, 1.4552986550, -209.5494658307, 4.3266809E-04, 5.1072212E-07, -2.4131116E-09, 1.2618162, 7.5108957121, 16728.3705250656, 1.1655481E-04, 2.8300097E-07, -1.3951435E-09];
  var M11 = [
    1.6768000, -0.0431256817, 628.3019552485, -2.6638815E-06, 6.1639211E-10, -5.4439728E-11, 0.5164200, 11.2260974062, 6585.7609102104, -2.1583699E-04, -1.8708058E-07, 9.3204945E-10, 0.4138300, 13.5816519784, 14914.4523349355, -6.3524240E-05, 6.3330532E-08, -2.5428962E-10, 0.3711500, 5.5402729076, 7700.3894694766, 1.5497663E-04, 2.4979472E-07, -1.1318993E-09,
    0.2756000, 2.3124288905, 8956.9933799736, 1.4964887E-04, 2.5102751E-07, -1.2407788E-09, 0.2459863, -25.6198212459, -2.3011998397, 1.5231275E-04, 2.5041111E-07, -1.1863391E-09, 0.0711800, 7.9982533891, 7842.3648207073, -2.2116475E-04, -1.8584780E-07, 8.2317000E-10, 0.0612800, 10.3538079614, 16171.0562454324, -6.8852003E-05, 6.4563317E-08, -3.6316908E-10];
  var M12 = [0.0048700, -0.0431256817, 628.3019552485, -2.6638815E-06, 6.1639211E-10, -5.4439728E-11, 0.0022800, -27.1705318325, -2.3011998397, 1.5231275E-04, 2.5041111E-07, -1.1863391E-09, 0.0015000, 11.2260974062, 6585.7609102104, -2.1583699E-04, -1.8708058E-07, 9.3204945E-10];
  var M20 = [
    18461.2400600, 1.6279052448, 8433.4661576405, -6.4021295E-05, -4.9499477E-09, 2.0216731E-11, 1010.1671484, 3.9834598170, 16762.1575823656, 8.8291456E-05, 2.4546117E-07, -1.1661223E-09, 999.6936555, 0.7276493275, -104.7747329154, 2.1633405E-04, 2.5536106E-07, -1.2065558E-09, 623.6524746, 8.7690283983, 7109.2881325435, -2.1668263E-06, 6.8896872E-08, -3.2894608E-10,
    199.4837596, 9.6692843156, 15647.5290230993, -2.8252217E-04, -1.9141414E-07, 8.9782646E-10, 166.5741153, 6.4134738261, -1219.4032921817, -1.5447958E-04, -1.8151424E-07, 8.5739300E-10, 117.2606951, 12.0248388879, 23976.2204478244, -1.3020942E-04, 5.8996977E-08, -2.8851262E-10, 61.9119504, 6.3390143893, 25090.8490070907, 2.4060421E-04, 4.9587228E-07, -2.3524614E-09,
    33.3572027, 11.1245829706, 15437.9795572686, 1.5014592E-04, 3.1930799E-07, -1.5152852E-09, 31.7596709, 3.0832038997, 8223.9166918098, 3.6864680E-04, 5.0577218E-07, -2.3928949E-09, 29.5766003, 8.8121540801, 6480.9861772950, 4.9705523E-07, 6.8280480E-08, -2.7450635E-10, 15.5662654, 4.0579192538, -9548.0947169068, -3.0679233E-04, -4.3192536E-07, 2.0437321E-09,
    15.1215543, 14.3803934601, 32304.9118725496, 2.2103334E-05, 3.0940809E-07, -1.4748517E-09, -12.0941511, 8.7259027166, 7737.5900877920, -4.8307078E-06, 6.9513264E-08, -3.8338581E-10, 8.8681426, 9.7124099974, 15019.2270678508, -2.7985829E-04, -1.9203053E-07, 9.5226618E-10, 8.0450400, 0.6687636586, 8399.7091105030, -3.3191993E-05, 3.2017096E-08, -1.5363746E-10,
    7.9585542, 12.0679645696, 23347.9184925760, -1.2754553E-04, 5.8380585E-08, -2.3407289E-10, 7.4345550, 6.4565995078, -1847.7052474301, -1.5181570E-04, -1.8213063E-07, 9.1183272E-10, -6.7314363, -4.0265854988, -16133.8556271171, -9.0955337E-05, -2.4484477E-07, 1.1116826E-09, 6.5795750, 16.8104074692, 14323.3509980023, -2.2066770E-04, -1.1756732E-07, 5.4866364E-10,
    -6.4600721, 1.5847795630, 9061.7681128890, -6.6685176E-05, -4.3335556E-09, -3.4222998E-11, -6.2964773, 4.8837157343, 25300.3984729215, -1.9206388E-04, -1.4849843E-08, 6.0650192E-11, -5.6323538, -0.7707750092, 733.0766881638, -2.1899793E-04, -2.5474467E-07, 1.1521161E-09, -5.3683961, 6.8263720663, 16204.8433027325, -9.7115356E-05, 2.7023515E-08, -1.3414795E-10,
    -5.3112784, 3.9403341353, 17390.4595376141, 8.5627574E-05, 2.4607756E-07, -1.2205621E-09, -5.0759179, 0.6845236457, 523.5272223331, 2.1367016E-04, 2.5597745E-07, -1.2609955E-09, -4.8396143, -1.6710309265, -7805.1642023920, 6.1357413E-05, 5.5663398E-09, -7.4656459E-11, -4.8057401, 3.5705615768, -662.0890125485, 3.0927234E-05, 3.6923410E-08, -1.7458141E-10,
    3.9840545, 8.6945689615, 33419.5404318159, 3.9291696E-04, 7.4628340E-07, -3.5388005E-09, 3.6744619, 19.1659620415, 22652.0424227274, -6.8354947E-05, 1.3284380E-07, -6.3767543E-10, 2.9984815, 20.0662179587, 31190.2833132833, -3.4871029E-04, -1.2746721E-07, 5.8909710E-10, 2.7986413, -2.5281611620, -16971.7070481963, 3.4437664E-04, 2.6526096E-07, -1.2469893E-09,
    2.4138774, 17.7106633865, 22861.5918885581, -5.0102304E-04, -3.7787833E-07, 1.7754362E-09, 2.1863132, 5.5132179088, -9757.6441827375, 1.2587576E-04, 7.8796768E-08, -3.6937954E-10, 2.1461692, 13.4801375428, 23766.6709819937, 3.0245868E-04, 5.6971910E-07, -2.7016242E-09, 1.7659832, 11.1677086523, 14809.6776020201, 1.5280981E-04, 3.1869159E-07, -1.4608454E-09,
    -1.6244212, 7.3137297434, 7318.8375983742, -4.3483492E-04, -4.4182525E-07, 2.0841655E-09, 1.5813036, 5.4387584720, 16552.6081165349, 5.2095955E-04, 7.5618329E-07, -3.5792340E-09, 1.5197528, 16.7359480324, 40633.6032972747, 1.7441609E-04, 5.5981921E-07, -2.6611908E-09, 1.5156341, 1.7023646816, -17876.7861416319, -4.5910508E-04, -6.8233647E-07, 3.2300712E-09,
    1.5102092, 5.4977296450, 8399.6847301375, -3.3094061E-05, 3.1973462E-08, -1.5436468E-10, -1.3178223, 9.6261586339, 16275.8309783478, -2.8518605E-04, -1.9079775E-07, 8.4338673E-10, -1.2642739, 11.9817132061, 24604.5224030729, -1.3287330E-04, 5.9613369E-08, -3.4295235E-10, 1.1918723, 22.4217725310, 39518.9747380084, -1.9639754E-04, 1.2294390E-07, -5.9724197E-10,
    1.1346110, 14.4235191419, 31676.6099173011, 2.4767216E-05, 3.0879170E-07, -1.4204120E-09, 1.0857810, 8.8552797618, 5852.6842220465, 3.1609367E-06, 6.7664088E-08, -2.2006663E-10, -1.0193852, 7.2392703065, 33629.0898976466, -3.9751134E-05, 2.3556127E-07, -1.1256889E-09, -0.8227141, 11.0814572888, 16066.2815125171, 1.4748204E-04, 3.1992438E-07, -1.5697249E-09,
    0.8042238, 3.5274358950, -33.7870573000, 2.8263353E-05, 3.7539802E-08, -2.2902113E-10, 0.8025939, 6.7832463846, 16833.1452579809, -9.9779237E-05, 2.7639907E-08, -1.8858767E-10, -0.7931866, -6.3821400710, -24462.5470518423, -2.4326809E-04, -4.9525589E-07, 2.2980217E-09, -0.7910153, 6.3703481443, -591.1013369332, -1.5714346E-04, -1.8089785E-07, 8.0295327E-10,
    -0.6674056, 9.1819266386, 24533.5347274576, 5.5197395E-05, 2.7743463E-07, -1.3204870E-09, 0.6502226, 4.1010449356, -10176.3966721553, -3.0412845E-04, -4.3254175E-07, 2.0981718E-09, -0.6388131, 6.2958887075, 25719.1509623392, 2.3794032E-04, 4.9648867E-07, -2.4069012E-09];
  var M21 = [
    0.0743000, 11.9537467337, 6480.9861772950, 4.9705523E-07, 6.8280480E-08, -2.7450635E-10, 0.0304300, 8.7259027166, 7737.5900877920, -4.8307078E-06, 6.9513264E-08, -3.8338581E-10, 0.0222900, 12.8540026510, 15019.2270678508, -2.7985829E-04, -1.9203053E-07, 9.5226618E-10, 0.0199900, 15.2095572232, 23347.9184925760, -1.2754553E-04, 5.8380585E-08, -2.3407289E-10,
    0.0186900, 9.5981921614, -1847.7052474301, -1.5181570E-04, -1.8213063E-07, 9.1183272E-10, 0.0169600, 7.1681781524, 16133.8556271171, 9.0955337E-05, 2.4484477E-07, -1.1116826E-09, 0.0162300, 1.5847795630, 9061.7681128890, -6.6685176E-05, -4.3335556E-09, -3.4222998E-11, 0.0141900, -0.7707750092, 733.0766881638, -2.1899793E-04, -2.5474467E-07, 1.1521161E-09];
  var M30 = [
    385000.5290396, 1.5707963268, 0.0000000000, 0.0000000E+00, 0.0000000E+00, 0.0000000E+00, -20905.3551378, 3.9263508990, 8328.6914247251, 1.5231275E-04, 2.5041111E-07, -1.1863391E-09, -3699.1109330, 9.6121753977, 7214.0628654588, -2.1850087E-04, -1.8646419E-07, 8.7760973E-10, -2955.9675626, 11.9677299699, 15542.7542901840, -6.6188121E-05, 6.3946925E-08, -3.0872935E-10,
    -569.9251264, 6.2819054713, 16657.3828494503, 3.0462550E-04, 5.0082223E-07, -2.3726782E-09, 246.1584797, 7.2566208254, -1114.6285592663, -3.7081362E-04, -4.3687530E-07, 2.0639488E-09, -204.5861179, 12.0108556517, 14914.4523349355, -6.3524240E-05, 6.3330532E-08, -2.5428962E-10, -170.7330791, 14.3232845422, 23871.4457149091, 8.6124629E-05, 3.1435804E-07, -1.4950684E-09,
    -152.1378118, 9.6553010794, 6585.7609102104, -2.1583699E-04, -1.8708058E-07, 9.3204945E-10, -129.6202242, -0.8278839272, -7700.3894694766, -1.5497663E-04, -2.4979472E-07, 1.1318993E-09, 108.7427014, 6.7692631483, 7771.3771450920, -3.3094061E-05, 3.1973462E-08, -1.5436468E-10, 104.7552944, 3.8832252173, 8956.9933799736, 1.4964887E-04, 2.5102751E-07, -1.2407788E-09,
    79.6605685, 0.6705404095, -8538.2408905558, 2.8035534E-04, 2.6031101E-07, -1.2267725E-09, 48.8883284, 1.5276706450, 628.3019552485, -2.6638815E-06, 6.1639211E-10, -5.4439728E-11, -34.7825237, 20.0091090408, 22756.8171556428, -2.8468899E-04, -1.2251727E-07, 5.6888037E-10, 30.8238599, 11.9246042882, 16171.0562454324, -6.8852003E-05, 6.4563317E-08, -3.6316908E-10,
    24.2084985, 9.5690497159, 7842.3648207073, -2.2116475E-04, -1.8584780E-07, 8.2317000E-10, -23.2104305, 8.6374600436, 24986.0742741754, 4.5693825E-04, 7.5123334E-07, -3.5590172E-09, -21.6363439, 17.6535544685, 14428.1257309177, -4.3700174E-04, -3.7292838E-07, 1.7552195E-09, -16.6747239, 6.7261374666, 8399.6791003405, -3.5757942E-05, 3.2589854E-08, -2.0880440E-10,
    14.4026890, 4.9010662531, -9443.3199839914, -5.2312637E-04, -6.8728642E-07, 3.2502879E-09, -12.8314035, 14.3664102239, 23243.1437596606, 8.8788511E-05, 3.1374165E-07, -1.4406287E-09, -11.6499478, 22.3646636130, 31085.5085803679, -1.3237624E-04, 1.2789385E-07, -6.1745870E-10, -10.4447578, 16.6788391144, 32200.1371396342, 2.3843738E-04, 5.6476915E-07, -2.6814075E-09,
    10.3211071, 8.7119194804, -1324.1780250970, 6.1854469E-05, 7.3846820E-08, -3.4916281E-10, 10.0562033, 7.2997465071, -1742.9305145148, -3.6814974E-04, -4.3749170E-07, 2.1183885E-09, -9.8844667, 12.0539813334, 14286.1503796870, -6.0860358E-05, 6.2714140E-08, -1.9984990E-10, 8.7515625, 6.3563649081, -9652.8694498221, -9.0458282E-05, -1.7656429E-07, 8.3717626E-10,
    -8.3791067, 4.4137085761, -557.3142796331, -1.8540681E-04, -2.1843765E-07, 1.0319744E-09, -7.0026961, -3.1834384995, -16029.0808942018, -3.0728938E-04, -5.0020584E-07, 2.3182384E-09, 6.3220032, 9.1248177206, 16100.0685698171, 1.1921869E-04, 2.8238458E-07, -1.3407038E-09, 5.7508579, 6.2387797896, 17285.6848046987, 3.0196162E-04, 5.0143862E-07, -2.4271179E-09,
    -4.9501349, 9.6984267611, 5957.4589549619, -2.1317311E-04, -1.8769697E-07, 9.8648918E-10, -4.4211770, 3.0260949818, -209.5494658307, 4.3266809E-04, 5.1072212E-07, -2.4131116E-09, 4.1311145, 11.0674740526, 7004.5133996281, 2.1416722E-04, 3.2425793E-07, -1.5355019E-09, -3.9579827, 20.0522347225, 22128.5152003943, -2.8202511E-04, -1.2313366E-07, 6.2332010E-10,
    3.2582371, 14.8106422192, 14985.4400105508, -2.5159493E-04, -1.5449073E-07, 7.2324505E-10, -3.1483020, 4.8266068163, 16866.9323152810, -1.2804259E-04, -9.8998954E-09, 4.0433461E-11, 2.6164092, 14.2801588604, 24499.7476701576, 8.3460748E-05, 3.1497443E-07, -1.5495082E-09, 2.3536310, 9.5259240342, 8470.6667759558, -2.2382863E-04, -1.8523141E-07, 7.6873027E-10,
    -2.1171283, -0.8710096090, -7072.0875142282, -1.5764051E-04, -2.4917833E-07, 1.0774596E-09, -1.8970368, 17.6966801503, 13799.8237756692, -4.3433786E-04, -3.7354477E-07, 1.8096592E-09, -1.7385258, 2.0581540038, -8886.0057043583, -3.3771956E-04, -4.6884877E-07, 2.2183135E-09, -1.5713944, 22.4077892948, 30457.2066251194, -1.2971236E-04, 1.2727746E-07, -5.6301898E-10,
    -1.4225541, 24.7202181853, 39414.2000050930, 1.9936508E-05, 3.7830496E-07, -1.8037978E-09, -1.4189284, 17.1661967915, 23314.1314352759, -9.9282182E-05, 9.5920387E-08, -4.6309403E-10, 1.1655364, 3.8400995356, 9585.2953352221, 1.4698499E-04, 2.5164390E-07, -1.2952185E-09, -1.1169371, 10.9930146158, 33314.7656989005, 6.0925100E-04, 1.0016445E-06, -4.7453563E-09,
    1.0656723, 1.4845449633, 1256.6039104970, -5.3277630E-06, 1.2327842E-09, -1.0887946E-10, 1.0586190, 11.9220903668, 8364.7398411275, -2.1850087E-04, -1.8646419E-07, 8.7760973E-10, -0.9333176, 9.0816920389, 16728.3705250656, 1.1655481E-04, 2.8300097E-07, -1.3951435E-09, 0.8624328, 12.4550876470, 6656.7485858257, -4.0390768E-04, -4.0490184E-07, 1.9095841E-09,
    0.8512404, 4.3705828944, 70.9876756153, -1.8807069E-04, -2.1782126E-07, 9.7753467E-10, -0.8488018, 16.7219647962, 31571.8351843857, 2.4110126E-04, 5.6415276E-07, -2.6269678E-09, -0.7956264, 3.5134526588, -9095.5551701890, 9.4948529E-05, 4.1873358E-08, -1.9479814E-10];
  var M31 = [
    0.5139500, 12.0108556517, 14914.4523349355, -6.3524240E-05, 6.3330532E-08, -2.5428962E-10, 0.3824500, 9.6553010794, 6585.7609102104, -2.1583699E-04, -1.8708058E-07, 9.3204945E-10, 0.3265400, 3.9694765808, 7700.3894694766, 1.5497663E-04, 2.4979472E-07, -1.1318993E-09, 0.2639600, 0.7416325637, 8956.9933799736, 1.4964887E-04, 2.5102751E-07, -1.2407788E-09,
    0.1230200, -1.6139220085, 628.3019552485, -2.6638815E-06, 6.1639211E-10, -5.4439728E-11, 0.0775400, 8.7830116346, 16171.0562454324, -6.8852003E-05, 6.4563317E-08, -3.6316908E-10, 0.0606800, 6.4274570623, 7842.3648207073, -2.2116475E-04, -1.8584780E-07, 8.2317000E-10, 0.0497000, 12.0539813334, 14286.1503796870, -6.0860358E-05, 6.2714140E-08, -1.9984990E-10];
  var M1n = [3.81034392032, 8.39968473021E+03, -3.31919929753E-05, //月球平黄经系数
    3.20170955005E-08, -1.53637455544E-10];

//==================日位置计算===================
  var EnnT = 0; //调用Enn前先设置EnnT时间变量
  function Enn(F) { //计算E10,E11,E20等,即:某一组周期项或泊松项算出,计算前先设置EnnT时间
    var i, v = 0;
    for (i = 0; i < F.length; i += 3) {
      v += F[i] * Math.cos(F[i + 1] + EnnT * F[i + 2]);
    }
    return v;
  }

  function earCal(jd) {//返回地球位置,日心Date黄道分点坐标
    var t = jd.toJC();
    var coord = new Coord();
    EnnT = t / 10;
    var t1 = EnnT, t2 = t1 * t1, t3 = t2 * t1, t4 = t3 * t1, t5 = t4 * t1;
    //coord.e1 = Angle.rad(Enn(E10) + Enn(E11) * t1 + Enn(E12) * t2 + Enn(E13) * t3 + Enn(E14) * t4 + Enn(E15) * t5);
//    coord.e2 = Angle.rad(Enn(E20) + Enn(E21) * t1);
//    coord.e3 = Enn(E30) + Enn(E31) * t1 + Enn(E32) * t2 + Enn(E33) * t3;

    coord.e1 = Angle.rad((Enn(L0) + Enn(L1) * t1 + Enn(L2) * t2 + Enn(L3) * t3 + Enn(L4) * t4 + Enn(L5) * t5)/100000000.0);
    coord.e2 = Angle.rad((Enn(B0) + Enn(B1) * t1)/100000000.0);
    coord.e3 = (Enn(R0) + Enn(R1) * t1 + Enn(R2) * t2 + Enn(R3) * t3)/100000000.0;

//    coord.e1 = Angle.rad(XL0_calc(0,0,t,60));
//    coord.e2 = Angle.rad(XL0_calc(0,1,t,-1));
//    coord.e3 = Angle.rad(XL0_calc(0,2,t,-1));
    return coord;
  }

  function sunCal2(jd) { //传回jd时刻太阳的地心视黄经及黄纬
    var sun = earCal(jd);
    sun.e1.add(Math.PI);
    sun.e2.mul(-1); //计算太阳真位置
    var d = Coord.reNut(jd);
    sun.e1.add(d.Lon);  //补章动
    Coord.reAbe(jd, sun); //补周年黄经光行差
    return sun;   //返回太阳视位置
  }

//==================月位置计算===================
  var MnnT = 0; //调用Mnn前先设置MnnT时间变量
  function Mnn(F) { //计算M10,M11,M20等,计算前先设置MnnT时间
    var i, v = 0, t1 = MnnT, t2 = t1 * t1, t3 = t2 * t1, t4 = t3 * t1;
    for (i = 0; i < F.length; i += 6)
      v += F[i] * Math.sin(F[i + 1] + t1 * F[i + 2] + t2 * F[i + 3] + t3 * F[i + 4] + t4 * F[i + 5]);
    return v;
  }

  function moonCal(jd) {//返回月球位置,返回地心Date黄道坐标
    MnnT = jd.toJC();
    var t1 = MnnT, t2 = t1 * t1, t3 = t2 * t1, t4 = t3 * t1;
    var coord = new Coord(); //地心Date黄道原点坐标(不含岁差)
    coord.e1 = Angle.rad((Mnn(M10) + Mnn(M11) * t1 + Mnn(M12) * t2) / Angle.R2A);
    coord.e2 = Angle.rad((Mnn(M20) + Mnn(M21) * t1) / Angle.R2A);
    coord.e3 = (Mnn(M30) + Mnn(M31) * t1) * 0.999999949827;
    coord.e1.add(M1n[0] + M1n[1] * t1 + M1n[2] * t2 + M1n[3] * t3 + M1n[4] * t4);
    Coord.rePre(jd, coord); //补岁差
    return coord;
  }

  function moonCal2(jd) { //传回月球的地心视黄经及视黄纬
    var moon = moonCal(jd);
    var d = Coord.reNut(jd);
    moon.e1.add(d.Lon); //补章动
    return moon;
  }

  function moonCal3(jd) { //传回月球的地心视赤经及视赤纬
    var moon = moonCal(jd);
    Coord.trans(moon, Coord.obl(jd));
    Coord.nutationRaDec(jd, moon); //补赤经及赤纬章动
    //如果黄赤转换前补了黄经章动及交章动,就不能再补赤经赤纬章动
    return moon;
  }

//==================地心坐标中的日月位置计算===================
  function jiaoCai(lx, jd, jiao) {
    //alert(jd);
    //lx=1时计算t时刻日月角距与jiao的差, lx=0计算t时刻太阳黄经与jiao的差
    var sun = earCal(jd); //计算太阳真位置(先算出日心坐标中地球的位置)
    sun.e1.add(Math.PI);
    sun.e2.mul(-1); //转为地心坐标
    Coord.reAbe(jd, sun);   //补周年光行差
    if (lx == 0) {
      var d = Coord.reNut(jd);
      sun.e1.add(d.Lon); //补黄经章动
      return Angle.inPI2(jiao - sun.e1);
    }
    var moon = moonCal(jd); //日月角差与章动无关
    return Angle.inPI2(jiao - (moon.e1 - sun.e1));
  }

//==================已知位置反求时间===================
  function jiaoCal(t1, jiao, lx) { //t1是J2000起算儒略日数

    //t1 = JDate.jd(t1 + JDate.J2000);
    //已知角度(jiao)求时间(t)
    //lx=0是太阳黄经达某角度的时刻计算(用于节气计算)
    //lx=1是日月角距达某角度的时刻计算(用于定朔望等)
    //传入的t1是指定角度对应真时刻t的前一些天
    //对于节气计算,应满足t在t1到t1+360天之间,对于Y年第n个节气(n=0是春分),t1可取值Y*365.2422+n*15.2
    //对于朔望计算,应满足t在t1到t1+25天之间,在此范围之外,求右边的根
    var t2 = t1, t = 0, v;
    if (lx == 0) t2 += 360; //在t1到t2范围内求解(范气360天范围),结果置于t
    else t2 += 25;
    jiao *= Math.PI / 180; //待搜索目标角
    //利用截弦法计算

    var v1 = jiaoCai(lx, JDate.jd(t1 + JDate.J2000), jiao);      //v1,v2为t1,t2时对应的黄经
    var v2 = jiaoCai(lx, JDate.jd(t2 + JDate.J2000), jiao);
    if (v1 < v2) v2 -= 2 * Math.PI;  //减2pi作用是将周期性角度转为连续角度
    var k = 1, k2, i; //k是截弦的斜率
    for (i = 0; i < 10; i++) {    //快速截弦求根,通常截弦三四次就已达所需精度
      k2 = (v2 - v1) / (t2 - t1);  //算出斜率
      if (Math.abs(k2) > 1e-15) k = k2;   //差商可能为零,应排除
      t = t1 - v1 / k;
      v = jiaoCai(lx, JDate.jd(t + JDate.J2000), jiao);//直线逼近法求根(直线方程的根)
      if (v > 1)   v -= 2 * Math.PI;    //一次逼近后,v1就已接近0,如果很大,则应减1周
      if (Math.abs(v) < 1e-8) break;   //已达精度
      t1 = t2, v1 = v2;
      t2 = t, v2 = v;     //下一次截弦
    }

    return t;
  }

//==================节气计算===================
  var jqB = new Array( //节气表
    "春分", "清明", "谷雨", "立夏", "小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑", "白露",
    "秋分", "寒露", "霜降", "立冬", "小雪", "大雪", "冬至", "小寒", "大寒", "立春", "雨水", "惊蛰");

  var JQtest = WC.JQtest = function (jd) { //节气使计算范例,y是年分,这是个测试函数
    var i, q, s1, s2, j;
    document.write("节气:世界时 原子时<br>");
    for (i = 0; i < 24; i++) {
      q = jiaoCal(jd + (i * 15.2) - JDate.J2000, i * 15, 0) + JDate.J2000 + 8 / 24; //计算第i个节气(i=0是春风),结果转为北京时

      //JDate.setFromJD(q,1); s1=JDate.toStr(); //将儒略日转成世界时
      //JDate.setFromJD(q,0); s2=JDate.toStr(); //将儒略日转成日期格式(输出日期形式的力学时)
      j = JDate.jd(q);
      //alert(q);
      document.write(jqB[i] + " : " + j.toStr() + " " + s2 + "<br>"); //显示
    }
  }
//=================定朔弦望计算========================
  function dingSuo(y, arc) { //这是个测试函数
    var i, jd = 365.2422 * (y - 2000), q, s1, s2;
    document.write("月份:世界时 原子时<br>");
    for (i = 0; i < 12; i++) {
      q = jiaoCal(jd + 29.5 * i, arc, 1) + J2000 + 8 / 24;  //计算第i个节气(i=0是春风),结果转为北京时
      JDate.setFromJD(q, 1);
      s1 = JDate.toStr(); //将儒略日转成世界时
      JDate.setFromJD(q, 0);
      s2 = JDate.toStr(); //将儒略日转成日期格式(输出日期形式的力学时)
      document.write((i + 1) + "月 : " + s1 + " " + s2 + "<br>"); //显示
    }
  }

//=================农历计算========================
  /*****
   1.冬至所在的UTC日期保存在A[0],根据"规定1"得知在A[0]之前(含A[0])的那个UTC朔日定为年首日期
   冬至之后的中气分保存在A[1],A[2],A[3]...A[13],其中A[12]又回到了冬至,共计算13次中气
   2.连续计算冬至后14个朔日,即起算时间时A[0]+1
   14个朔日编号为0,1...12,保存在C[0],C[1]...C[13]
   这14个朔日表示编号为0月,1月,...12月0月的各月终止日期,但要注意实际终止日是新月初一,不属本月
   这14个朔日同样表示编号为1月,2月...的开始日期
   设某月编号为n,那么开始日期为C[n-1],结束日期为C[n],如果每月都含中气,该月所含的中气为A[n]
   注:为了全总计算出13个月的大小月情况,须算出14个朔日。
   3.闰年判断:含有13个月的年份是闰年
   当第13月(月编号12月)终止日期大于冬至日, 即C[12]〉A[12], 那么该月是新年,本年没月12月,本年共12个月
   当第13月(月编号12月)终止日期小等于冬至日,即C[12]≤A[12],那么该月是本年的有效月份,本年共13个月
   4.闰年中处理闰月:
   13个月中至少1个月份无中气,首个无中气的月置闰,在n=1...12月中找到闰月,即C[n]≤A[n]
   从农历年首的定义知道,0月一定含有中气冬至,所以不可能是闰月。
   首月有时很贪心,除冬至外还可能再吃掉本年或前年的另一个中气
   定出闰月后,该月及以后的月编号减1
   5.以上所述的月编号不是日常生活中说的"正月","二月"等月名称:
   如果"建子",0月为首月,如果"建寅",2月的月名"正月",3月是"二月",其余类推
   *****/
  var yueMing = new Array("正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "11", "12");

  var paiYue = WC.paiYue = function () { //农历排月序计算,可定出农历
    y = document.getElementById('in1').value - 0;
    var zq = [], jq = [], hs = []; //中气表,节气表,日月合朔表

    //从冬至开始,连续计算14个中气时刻
    var i, t1 = 365.2422 * (y - 2000) - 50; //农历年首始于前一年的冬至,为了节气中气一起算,取前年大雪之前
    for (i = 0; i < 14; i++) {  //计算节气(从冬至开始),注意:返回的是力学时
      zq[i] = jiaoCal(t1 + i * 30.4, i * 30 - 90, 0); //中气计算,冬至的太阳黄经是270度(或-90度)
      jq[i] = jiaoCal(t1 + i * 30.4, i * 30 - 105, 0); //顺便计算节气,它不是农历定朔计算所必需的
    }
    //在冬至过后,连续计算14个日月合朔时刻
    var dongZhiJia1 = zq[0] + 1 - JDate.Dint_dec(zq[0], 8, 0); //冬至过后的第一天0点的儒略日数
    hs[0] = jiaoCal(dongZhiJia1, 0, 1); //首月结束的日月合朔时刻
    for (i = 1; i < 14; i++) hs[i] = jiaoCal(hs[i - 1] + 25, 0, 1);
    //算出中气及合朔时刻的日数(不含小数的日数计数,以便计算日期之间的差值)
    var A = [], B = [], C = [];
    for (i = 0; i < 14; i++) { //取当地UTC日数的整数部分
      A[i] = JDate.Dint_dec(zq[i], 8, 1);
      B[i] = JDate.Dint_dec(jq[i], 8, 1);
      C[i] = JDate.Dint_dec(hs[i], 8, 1);
    }
    //闰月及大小月分析
    var tot = 12, nun = -1, yn = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0, 0]; //月编号
    if (C[12] <= A[12]) { //闰月分析
      yn[12] = 12, tot = 13; //编号为12的月是本年的有效月份,本年总月数13个
      for (i = 1; i < 13; i++) if (C[i] <= A[i]) break;
      for (nun = i - 1; i < 13; i++) yn[i - 1]--; //注意yn中不含农历首月(所以取i-1),在公历中农历首月总是去年的所以不多做计算
    }
    for (i = 0; i < tot; i++) { //转为建寅月名,并做大小月分析
      yn[i] = yueMing[(yn[i] + 10) % 12];           //转建寅月名
      if (i == nun)     yn[i] += "闰"; else yn[i] += "月"; //标记是否闰月
      if (C[i + 1] - C[i] > 29) yn[i] += "大"; else yn[i] += "小" //标记大小月
    }
    //显示
    var out = "节气  手表时      中气  手表时      农历月  朔的手表时\r\n";
    var j;
    for (i = 0; i < tot; i++) {
      var zm = (i * 2 + 18) % 24, jm = (i * 2 + 17) % 24; //中气名节气名
      j = JDate.jd(jq[i] + JDate.J2000 + 8 / 24, 1);
      out += jqB[jm] + ":" + j.toUTC() + " "; //显示节气
      j = JDate.jd(zq[i] + JDate.J2000 + 8 / 24, 1);
      out += jqB[zm] + ":" + j.toUTC() + " "; //显示中气
      j = JDate.jd(hs[i] + JDate.J2000 + 8 / 24, 1);
      out += yn[i] + ":" + j.toUTC() + "\r\n"; //显示日月合朔
    }
    document.getElementById('show1').innerText = out;
  };


  //===============================================================================================================

  //=================================星历数据=========================================
//==================================================================================

  /********************************
   8行星星历数据表,及数据表的计算
   ********************************/

  var XL0 = [
//Dear精度:J2000+-4千年 黄经0.1角秒 黄纬0.1角秒 距离0.1AU/10^6
    [
      10000000000,//A的倍率
      20, 578, 920, 1100, 1124, 1136, 1148, 1217, 1226, 1229, 1229, 1229, 1229, 1937, 2363, 2618, 2633, 2660, 2666,//位置索引表
      /*L0*/ 17534704567, 0.00000000000, 0.00000000000, 334165646, 4.669256804, 6283.075849991, 3489428, 4.6261024, 12566.1517000, 349706, 2.744118, 5753.384885, 341757, 2.828866, 3.523118, 313590, 3.627670, 77713.771468, 267622, 4.418084, 7860.419392, 234269, 6.135162, 3930.209696, 132429, 0.742464, 11506.769770, 127317, 2.037097, 529.690965, 119917, 1.109629, 1577.343542, 99025, 5.23268, 5884.92685, 90186, 2.04505, 26.29832, 85722, 3.50849, 398.14900, 77979, 1.17883, 5223.69392, 75314, 2.53339, 5507.55324, 50526, 4.58293, 18849.22755, 49238, 4.20507, 775.52261, 35666, 2.91954, 0.06731, 31709, 5.84902, 11790.62909, 28413, 1.89869, 796.29801, 27104, 0.31489, 10977.07880, 24281, 0.34481, 5486.77784, 20616, 4.80647, 2544.31442, 20539, 1.86948, 5573.14280, 20226, 2.45768, 6069.77675, 15552, 0.83306, 213.29910, 13221, 3.41118, 2942.46342, 12618, 1.08303, 20.77540, 11513, 0.64545, 0.98032, 10285, 0.63600, 4694.00295, 10190, 0.97569, 15720.83878, 10172, 4.26680, 7.11355, 9921, 6.2099, 2146.1654, 9761, 0.6810, 155.4204, 8580, 5.9832, 161000.6857, 8513, 1.2987, 6275.9623, 8471, 3.6708, 71430.6956, 7964, 1.8079, 17260.1547, 7876, 3.0370, 12036.4607, 7465, 1.7551, 5088.6288, 7387, 3.5032, 3154.6871, 7355, 4.6793, 801.8209, 6963, 0.8330, 9437.7629, 6245, 3.9776, 8827.3903, 6115, 1.8184, 7084.8968, 5696, 2.7843, 6286.5990, 5612, 4.3869, 14143.4952, 5558, 3.4701, 6279.5527, 5199, 0.1891, 12139.5535, 5161, 1.3328, 1748.0164, 5115, 0.2831, 5856.4777, 4900, 0.4874, 1194.4470, 4104, 5.3682, 8429.2413, 4094, 2.3985, 19651.0485, 3920, 6.1683, 10447.3878, 3677, 6.0413, 10213.2855, 3660, 2.5696, 1059.3819, 3595, 1.7088, 2352.8662, 3557, 1.7760, 6812.7668, 3329, 0.5931, 17789.8456, 3041, 0.4429, 83996.8473, 3005, 2.7398, 1349.8674, 2535, 3.1647, 4690.4798, 2474, 0.2148, 3.5904, 2366, 0.4847, 8031.0923, 2357, 2.0653, 3340.6124, 2282, 5.2220, 4705.7323, 2189, 5.5559, 553.5694, 2142, 1.4256, 16730.4637, 2109, 4.1483, 951.7184, 2030, 0.3713, 283.8593, 1992, 5.2221, 12168.0027, 1986, 5.7747, 6309.3742, 1912, 3.8222, 23581.2582, 1889, 5.3863, 149854.4001, 1790, 2.2149, 13367.9726, 1748, 4.5605, 135.0651, 1622, 5.9884, 11769.8537, 1508, 4.1957, 6256.7775, 1442, 4.1932, 242.7286, 1435, 3.7236, 38.0277, 1397, 4.4014, 6681.2249, 1362, 1.8893, 7632.9433, 1250, 1.1305, 5.5229, 1205, 2.6223, 955.5997, 1200, 1.0035, 632.7837, 1129, 0.1774, 4164.3120, 1083, 0.3273, 103.0928, 1052, 0.9387, 11926.2544, 1050, 5.3591, 1592.5960, 1033, 6.1998, 6438.4962, 1001, 6.0291, 5746.2713, 980, 0.999, 11371.705, 980, 5.244, 27511.468, 938, 2.624, 5760.498, 923, 0.483, 522.577, 922, 4.571, 4292.331, 905, 5.337, 6386.169, 862, 4.165, 7058.598, 841, 3.299, 7234.794, 836, 4.539, 25132.303, 813, 6.112, 4732.031, 812, 6.271, 426.598, 801, 5.821, 28.449, 787, 0.996, 5643.179, 776, 2.957, 23013.540, 769, 3.121, 7238.676, 758, 3.974, 11499.656, 735, 4.386, 316.392, 731, 0.607, 11513.883, 719, 3.998, 74.782, 706, 0.323, 263.084, 676, 5.911, 90955.552, 663, 3.665, 17298.182, 653, 5.791, 18073.705, 630, 4.717, 6836.645, 615, 1.458, 233141.314, 612, 1.075, 19804.827, 596, 3.321, 6283.009, 596, 2.876, 6283.143, 555, 2.452, 12352.853, 541, 5.392, 419.485, 531, 0.382, 31441.678, 519, 4.065, 6208.294, 513, 2.361, 10973.556, 494, 5.737, 9917.697, 450, 3.272, 11015.106, 449, 3.653, 206.186, 447, 2.064, 7079.374, 435, 4.423, 5216.580, 421, 1.906, 245.832, 413, 0.921, 3738.761, 402, 0.840, 20.355, 387, 1.826, 11856.219, 379, 2.344, 3.881, 374, 2.954, 3128.389, 370, 5.031, 536.805, 365, 1.018, 16200.773, 365, 1.083, 88860.057, 352, 5.978, 3894.182, 352, 2.056, 244287.600, 351, 3.713, 6290.189, 340, 1.106, 14712.317, 339, 0.978, 8635.942, 339, 3.202, 5120.601, 333, 0.837, 6496.375, 325, 3.479, 6133.513, 316, 5.089, 21228.392, 316, 1.328, 10873.986, 309, 3.646, 10.637, 303, 1.802, 35371.887, 296, 3.397, 9225.539, 288, 6.026, 154717.610, 281, 2.585, 14314.168, 262, 3.856, 266.607, 262, 2.579, 22483.849, 257, 1.561, 23543.231, 255, 3.949, 1990.745, 251, 3.744, 10575.407, 240, 1.161, 10984.192, 238, 0.106, 7.046, 236, 4.272, 6040.347, 234, 3.577, 10969.965, 211, 3.714, 65147.620, 210, 0.754, 13521.751, 207, 4.228, 5650.292, 202, 0.814, 170.673, 201, 4.629, 6037.244, 200, 0.381, 6172.870, 199, 3.933, 6206.810, 199, 5.197, 6262.300, 197, 1.046, 18209.330, 195, 1.070, 5230.807, 195, 4.869, 36.028, 194, 4.313, 6244.943, 192, 1.229, 709.933, 192, 5.595, 6282.096, 192, 0.602, 6284.056, 189, 3.744, 23.878, 188, 1.904, 15.252, 188, 0.867, 22003.915, 182, 3.681, 15110.466, 181, 0.491, 1.484, 179, 3.222, 39302.097, 179, 1.259, 12559.038,
      /*L1*/ 62833196674749, 0.000000000000, 0.000000000000, 20605886, 2.67823456, 6283.07584999, 430343, 2.635127, 12566.151700, 42526, 1.59047, 3.52312, 11926, 5.79557, 26.29832, 10898, 2.96618, 1577.34354, 9348, 2.5921, 18849.2275, 7212, 1.1385, 529.6910, 6777, 1.8747, 398.1490, 6733, 4.4092, 5507.5532, 5903, 2.8880, 5223.6939, 5598, 2.1747, 155.4204, 4541, 0.3980, 796.2980, 3637, 0.4662, 775.5226, 2896, 2.6471, 7.1135, 2084, 5.3414, 0.9803, 1910, 1.8463, 5486.7778, 1851, 4.9686, 213.2991, 1729, 2.9912, 6275.9623, 1623, 0.0322, 2544.3144, 1583, 1.4305, 2146.1654, 1462, 1.2053, 10977.0788, 1246, 2.8343, 1748.0164, 1188, 3.2580, 5088.6288, 1181, 5.2738, 1194.4470, 1151, 2.0750, 4694.0030, 1064, 0.7661, 553.5694, 997, 1.303, 6286.599, 972, 4.239, 1349.867, 945, 2.700, 242.729, 858, 5.645, 951.718, 758, 5.301, 2352.866, 639, 2.650, 9437.763, 610, 4.666, 4690.480, 583, 1.766, 1059.382, 531, 0.909, 3154.687, 522, 5.661, 71430.696, 520, 1.854, 801.821, 504, 1.425, 6438.496, 433, 0.241, 6812.767, 426, 0.774, 10447.388, 413, 5.240, 7084.897, 374, 2.001, 8031.092, 356, 2.429, 14143.495, 350, 4.800, 6279.553, 337, 0.888, 12036.461, 337, 3.862, 1592.596, 325, 3.400, 7632.943, 322, 0.616, 8429.241, 318, 3.188, 4705.732, 297, 6.070, 4292.331, 295, 1.431, 5746.271, 290, 2.325, 20.355, 275, 0.935, 5760.498, 270, 4.804, 7234.794, 253, 6.223, 6836.645, 228, 5.003, 17789.846, 225, 5.672, 11499.656, 215, 5.202, 11513.883, 208, 3.955, 10213.286, 208, 2.268, 522.577, 206, 2.224, 5856.478, 206, 2.550, 25132.303, 203, 0.910, 6256.778, 189, 0.532, 3340.612, 188, 4.735, 83996.847, 179, 1.474, 4164.312, 178, 3.025, 5.523, 177, 3.026, 5753.385, 159, 4.637, 3.286, 157, 6.124, 5216.580, 155, 3.077, 6681.225, 154, 4.200, 13367.973, 143, 1.191, 3894.182, 138, 3.093, 135.065, 136, 4.245, 426.598, 134, 5.765, 6040.347, 128, 3.085, 5643.179, 127, 2.092, 6290.189, 125, 3.077, 11926.254, 125, 3.445, 536.805, 114, 3.244, 12168.003, 112, 2.318, 16730.464, 111, 3.901, 11506.770, 111, 5.320, 23.878, 105, 3.750, 7860.419, 103, 2.447, 1990.745, 96, 0.82, 3.88, 96, 4.08, 6127.66, 91, 5.42, 206.19, 91, 0.42, 7079.37, 88, 5.17, 11790.63, 81, 0.34, 9917.70, 80, 3.89, 10973.56, 78, 2.40, 1589.07, 78, 2.58, 11371.70, 77, 3.98, 955.60, 77, 3.36, 36.03, 76, 1.30, 103.09, 75, 5.18, 10969.97, 75, 4.96, 6496.37, 73, 5.21, 38.03, 72, 2.65, 6309.37, 70, 5.61, 3738.76, 69, 2.60, 3496.03, 69, 0.39, 15.25, 69, 2.78, 20.78, 65, 1.13, 7058.60, 64, 4.28, 28.45, 61, 5.63, 10984.19, 60, 0.73, 419.48, 60, 5.28, 10575.41, 58, 5.55, 17298.18, 58, 3.19, 4732.03,
      /*L2*/ 5291887, 0.0000000, 0.0000000, 871984, 1.072097, 6283.075850, 30913, 0.86729, 12566.15170, 2734, 0.0530, 3.5231, 1633, 5.1883, 26.2983, 1575, 3.6846, 155.4204, 954, 0.757, 18849.228, 894, 2.057, 77713.771, 695, 0.827, 775.523, 506, 4.663, 1577.344, 406, 1.031, 7.114, 381, 3.441, 5573.143, 346, 5.141, 796.298, 317, 6.053, 5507.553, 302, 1.192, 242.729, 289, 6.117, 529.691, 271, 0.306, 398.149, 254, 2.280, 553.569, 237, 4.381, 5223.694, 208, 3.754, 0.980, 168, 0.902, 951.718, 153, 5.759, 1349.867, 145, 4.364, 1748.016, 134, 3.721, 1194.447, 125, 2.948, 6438.496, 122, 2.973, 2146.165, 110, 1.271, 161000.686, 104, 0.604, 3154.687, 100, 5.986, 6286.599, 92, 4.80, 5088.63, 89, 5.23, 7084.90, 83, 3.31, 213.30, 76, 3.42, 5486.78, 71, 6.19, 4690.48, 68, 3.43, 4694.00, 65, 1.60, 2544.31, 64, 1.98, 801.82, 61, 2.48, 10977.08, 50, 1.44, 6836.65, 49, 2.34, 1592.60, 46, 1.31, 4292.33, 46, 3.81, 149854.40, 43, 0.04, 7234.79, 40, 4.94, 7632.94, 39, 1.57, 71430.70, 38, 3.17, 6309.37, 35, 0.99, 6040.35, 35, 0.67, 1059.38, 31, 3.18, 2352.87, 31, 3.55, 8031.09, 30, 1.92, 10447.39, 30, 2.52, 6127.66, 28, 4.42, 9437.76, 28, 2.71, 3894.18, 27, 0.67, 25132.30, 26, 5.27, 6812.77, 25, 0.55, 6279.55, 23, 1.38, 4705.73, 22, 0.64, 6256.78, 20, 6.07, 640.88,
      /*L3*/ 28923, 5.84384, 6283.07585, 3496, 0.0000, 0.0000, 1682, 5.4877, 12566.1517, 296, 5.196, 155.420, 129, 4.722, 3.523, 71, 5.30, 18849.23, 64, 5.97, 242.73, 40, 3.79, 553.57,
      /*L4*/ 11408, 3.14159, 0.00000, 772, 4.134, 6283.076, 77, 3.84, 12566.15, 42, 0.42, 155.42,
      /*L5*/ 88, 3.14, 0.00, 17, 2.77, 6283.08, 5, 2.01, 155.42, 3, 2.21, 12566.15,
      /*B0*/ 27962, 3.19870, 84334.66158, 10164, 5.42249, 5507.55324, 8045, 3.8801, 5223.6939, 4381, 3.7044, 2352.8662, 3193, 4.0003, 1577.3435, 2272, 3.9847, 1047.7473, 1814, 4.9837, 6283.0758, 1639, 3.5646, 5856.4777, 1444, 3.7028, 9437.7629, 1430, 3.4112, 10213.2855, 1125, 4.8282, 14143.4952, 1090, 2.0857, 6812.7668, 1037, 4.0566, 71092.8814, 971, 3.473, 4694.003, 915, 1.142, 6620.890, 878, 4.440, 5753.385, 837, 4.993, 7084.897, 770, 5.554, 167621.576, 719, 3.602, 529.691, 692, 4.326, 6275.962, 558, 4.410, 7860.419, 529, 2.484, 4705.732, 521, 6.250, 18073.705,
      /*B1*/ 903, 3.897, 5507.553, 618, 1.730, 5223.694, 380, 5.244, 2352.866,
      /*B2*/ 166, 1.627, 84334.662,
      /*R0*/ 10001398880, 0.00000000000, 0.00000000000, 167069963, 3.098463508, 6283.075849991, 1395602, 3.0552461, 12566.1517000, 308372, 5.198467, 77713.771468, 162846, 1.173877, 5753.384885, 157557, 2.846852, 7860.419392, 92480, 5.45292, 11506.76977, 54244, 4.56409, 3930.20970, 47211, 3.66100, 5884.92685, 34598, 0.96369, 5507.55324, 32878, 5.89984, 5223.69392, 30678, 0.29867, 5573.14280, 24319, 4.27350, 11790.62909, 21183, 5.84715, 1577.34354, 18575, 5.02194, 10977.07880, 17484, 3.01194, 18849.22755, 10984, 5.05511, 5486.77784, 9832, 0.8868, 6069.7768, 8650, 5.6896, 15720.8388, 8583, 1.2708, 161000.6857, 6490, 0.2725, 17260.1547, 6292, 0.9218, 529.6910, 5706, 2.0137, 83996.8473, 5574, 5.2416, 71430.6956, 4938, 3.2450, 2544.3144, 4696, 2.5781, 775.5226, 4466, 5.5372, 9437.7629, 4252, 6.0111, 6275.9623, 3897, 5.3607, 4694.0030, 3825, 2.3926, 8827.3903, 3749, 0.8295, 19651.0485, 3696, 4.9011, 12139.5535, 3566, 1.6747, 12036.4607, 3454, 1.8427, 2942.4634, 3319, 0.2437, 7084.8968, 3192, 0.1837, 5088.6288, 3185, 1.7778, 398.1490, 2846, 1.2134, 6286.5990, 2779, 1.8993, 6279.5527, 2628, 4.5890, 10447.3878, 2460, 3.7866, 8429.2413, 2393, 4.9960, 5856.4777, 2359, 0.2687, 796.2980, 2329, 2.8078, 14143.4952, 2210, 1.9500, 3154.6871, 2035, 4.6527, 2146.1654, 1951, 5.3823, 2352.8662, 1883, 0.6731, 149854.4001, 1833, 2.2535, 23581.2582, 1796, 0.1987, 6812.7668, 1731, 6.1520, 16730.4637, 1717, 4.4332, 10213.2855, 1619, 5.2316, 17789.8456, 1381, 5.1896, 8031.0923, 1364, 3.6852, 4705.7323, 1314, 0.6529, 13367.9726, 1041, 4.3329, 11769.8537, 1017, 1.5939, 4690.4798, 998, 4.201, 6309.374, 966, 3.676, 27511.468, 874, 6.064, 1748.016, 779, 3.674, 12168.003, 771, 0.312, 7632.943, 756, 2.626, 6256.778, 746, 5.648, 11926.254, 693, 2.924, 6681.225, 680, 1.423, 23013.540, 674, 0.563, 3340.612, 663, 5.661, 11371.705, 659, 3.136, 801.821, 648, 2.650, 19804.827, 615, 3.029, 233141.314, 612, 5.134, 1194.447, 563, 4.341, 90955.552, 552, 2.091, 17298.182, 534, 5.100, 31441.678, 531, 2.407, 11499.656, 523, 4.624, 6438.496, 513, 5.324, 11513.883, 477, 0.256, 11856.219, 461, 1.722, 7234.794, 458, 3.766, 6386.169, 458, 4.466, 5746.271, 423, 1.055, 5760.498, 422, 1.557, 7238.676, 415, 2.599, 7058.598, 401, 3.030, 1059.382, 397, 1.201, 1349.867, 379, 4.907, 4164.312, 360, 5.707, 5643.179, 352, 3.626, 244287.600, 348, 0.761, 10973.556, 342, 3.001, 4292.331, 336, 4.546, 4732.031, 334, 3.138, 6836.645, 324, 4.164, 9917.697, 316, 1.691, 11015.106, 307, 0.238, 35371.887, 298, 1.306, 6283.143, 298, 1.750, 6283.009, 293, 5.738, 16200.773, 286, 5.928, 14712.317, 281, 3.515, 21228.392, 280, 5.663, 8635.942, 277, 0.513, 26.298, 268, 4.207, 18073.705, 266, 0.900, 12352.853, 260, 2.962, 25132.303, 255, 2.477, 6208.294, 242, 2.800, 709.933, 231, 1.054, 22483.849, 229, 1.070, 14314.168, 216, 1.314, 154717.610, 215, 6.038, 10873.986, 200, 0.561, 7079.374, 198, 2.614, 951.718, 197, 4.369, 167283.762, 186, 2.861, 5216.580, 183, 1.660, 39302.097, 183, 5.912, 3738.761, 175, 2.145, 6290.189, 173, 2.168, 10575.407, 171, 3.702, 1592.596, 171, 1.343, 3128.389, 164, 5.550, 6496.375, 164, 5.856, 10984.192, 161, 1.998, 10969.965, 161, 1.909, 6133.513, 157, 4.955, 25158.602, 154, 6.216, 23543.231, 153, 5.357, 13521.751, 150, 5.770, 18209.330, 150, 5.439, 155.420, 139, 1.778, 9225.539, 139, 1.626, 5120.601, 128, 2.460, 13916.019, 123, 0.717, 143571.324, 122, 2.654, 88860.057, 121, 4.414, 3894.182, 121, 1.192, 3.523, 120, 4.030, 553.569, 119, 1.513, 17654.781, 117, 3.117, 14945.316, 113, 2.698, 6040.347, 110, 3.085, 43232.307, 109, 0.998, 955.600, 108, 2.939, 17256.632, 107, 5.285, 65147.620, 103, 0.139, 11712.955, 103, 5.850, 213.299, 102, 3.046, 6037.244, 101, 2.842, 8662.240, 100, 3.626, 6262.300, 98, 2.36, 6206.81, 98, 5.11, 6172.87, 98, 2.00, 15110.47, 97, 2.67, 5650.29, 97, 2.75, 6244.94, 96, 4.02, 6282.10, 96, 5.31, 6284.06, 92, 0.10, 29088.81, 85, 3.26, 20426.57, 84, 2.60, 28766.92, 81, 3.58, 10177.26, 80, 5.81, 5230.81, 78, 2.53, 16496.36, 77, 4.06, 6127.66, 73, 0.04, 5481.25, 72, 5.96, 12559.04, 72, 5.92, 4136.91, 71, 5.49, 22003.91, 70, 3.41, 7.11, 69, 0.62, 11403.68, 69, 3.90, 1589.07, 69, 1.96, 12416.59, 69, 4.51, 426.60, 67, 1.61, 11087.29, 66, 4.50, 47162.52, 66, 5.08, 283.86, 66, 4.32, 16858.48, 65, 1.04, 6062.66, 64, 1.59, 18319.54, 63, 5.70, 45892.73, 63, 4.60, 66567.49, 63, 3.82, 13517.87, 62, 2.62, 11190.38, 61, 1.54, 33019.02, 60, 5.58, 10344.30, 60, 5.38, 316428.23, 60, 5.78, 632.78, 59, 6.12, 9623.69, 57, 0.16, 17267.27, 57, 3.86, 6076.89, 57, 1.98, 7668.64, 56, 4.78, 20199.09, 55, 4.56, 18875.53, 55, 3.51, 17253.04, 54, 3.07, 226858.24, 54, 4.83, 18422.63, 53, 5.02, 12132.44, 52, 3.63, 5333.90, 52, 0.97, 155427.54, 51, 3.36, 20597.24, 50, 0.99, 11609.86, 50, 2.21, 1990.75, 48, 1.62, 12146.67, 48, 1.17, 12569.67, 47, 4.62, 5436.99, 47, 1.81, 12562.63, 47, 0.59, 21954.16, 47, 0.76, 7342.46, 46, 0.27, 4590.91, 46, 3.77, 156137.48, 45, 5.66, 10454.50, 44, 5.84, 3496.03, 43, 0.24, 17996.03, 41, 5.93, 51092.73, 41, 4.21, 12592.45, 40, 5.14, 1551.05, 40, 5.28, 15671.08, 39, 3.69, 18052.93, 39, 4.94, 24356.78, 38, 2.72, 11933.37, 38, 5.23, 7477.52, 38, 4.99, 9779.11, 37, 3.70, 9388.01, 37, 4.44, 4535.06, 36, 2.16, 28237.23, 36, 2.54, 242.73, 36, 0.22, 5429.88, 35, 6.15, 19800.95, 35, 2.92, 36949.23, 34, 5.63, 2379.16, 34, 5.73, 16460.33, 34, 5.11, 5849.36, 33, 6.19, 6268.85,
      /*R1*/ 10301861, 1.10748970, 6283.07584999, 172124, 1.064423, 12566.151700, 70222, 3.14159, 0.00000, 3235, 1.0217, 18849.2275, 3080, 2.8435, 5507.5532, 2497, 1.3191, 5223.6939, 1849, 1.4243, 1577.3435, 1008, 5.9138, 10977.0788, 865, 1.420, 6275.962, 863, 0.271, 5486.778, 507, 1.686, 5088.629, 499, 6.014, 6286.599, 467, 5.987, 529.691, 440, 0.518, 4694.003, 410, 1.084, 9437.763, 387, 4.750, 2544.314, 375, 5.071, 796.298, 352, 0.023, 83996.847, 344, 0.949, 71430.696, 341, 5.412, 775.523, 322, 6.156, 2146.165, 286, 5.484, 10447.388, 284, 3.420, 2352.866, 255, 6.132, 6438.496, 252, 0.243, 398.149, 243, 3.092, 4690.480, 225, 3.689, 7084.897, 220, 4.952, 6812.767, 219, 0.420, 8031.092, 209, 1.282, 1748.016, 193, 5.314, 8429.241, 185, 1.820, 7632.943, 175, 3.229, 6279.553, 173, 1.537, 4705.732, 158, 4.097, 11499.656, 158, 5.539, 3154.687, 150, 3.633, 11513.883, 148, 3.222, 7234.794, 147, 3.653, 1194.447, 144, 0.817, 14143.495, 135, 6.151, 5746.271, 134, 4.644, 6836.645, 128, 2.693, 1349.867, 123, 5.650, 5760.498, 118, 2.577, 13367.973, 113, 3.357, 17789.846, 110, 4.497, 4292.331, 108, 5.828, 12036.461, 102, 5.621, 6256.778, 99, 1.14, 1059.38, 98, 0.66, 5856.48, 93, 2.32, 10213.29, 92, 0.77, 16730.46, 88, 1.50, 11926.25, 86, 1.42, 5753.38, 85, 0.66, 155.42, 81, 1.64, 6681.22, 80, 4.11, 951.72, 66, 4.55, 5216.58, 65, 0.98, 25132.30, 64, 4.19, 6040.35, 64, 0.52, 6290.19, 63, 1.51, 5643.18, 59, 6.18, 4164.31, 57, 2.30, 10973.56, 55, 2.32, 11506.77, 55, 2.20, 1592.60, 55, 5.27, 3340.61, 54, 5.54, 553.57, 53, 5.04, 9917.70, 53, 0.92, 11371.70, 52, 3.98, 17298.18, 52, 3.60, 10969.97, 49, 5.91, 3894.18, 49, 2.51, 6127.66, 48, 1.67, 12168.00, 46, 0.31, 801.82, 42, 3.70, 10575.41, 42, 4.05, 10984.19, 40, 2.17, 7860.42, 40, 4.17, 26.30, 38, 5.82, 7058.60, 37, 3.39, 6496.37, 36, 1.08, 6309.37, 36, 5.34, 7079.37, 34, 3.62, 11790.63, 32, 0.32, 16200.77, 31, 4.24, 3738.76, 29, 4.55, 11856.22, 29, 1.26, 8635.94, 27, 3.45, 5884.93, 26, 5.08, 10177.26, 26, 5.38, 21228.39, 24, 2.26, 11712.96, 24, 1.05, 242.73, 24, 5.59, 6069.78, 23, 3.63, 6284.06, 23, 1.64, 4732.03, 22, 3.46, 213.30, 21, 1.05, 3496.03, 21, 3.92, 13916.02, 21, 4.01, 5230.81, 20, 5.16, 12352.85, 20, 0.69, 1990.75, 19, 2.73, 6062.66, 19, 5.01, 11015.11, 18, 6.04, 6283.01, 18, 2.85, 7238.68, 18, 5.60, 6283.14, 18, 5.16, 17253.04, 18, 2.54, 14314.17, 17, 1.58, 7.11, 17, 0.98, 3930.21, 17, 4.75, 17267.27, 16, 2.19, 6076.89, 16, 2.19, 18073.70, 16, 6.12, 3.52, 16, 4.61, 9623.69, 16, 3.40, 16496.36, 15, 0.19, 9779.11, 15, 5.30, 13517.87, 15, 4.26, 3128.39, 15, 0.81, 709.93, 14, 0.50, 25158.60, 14, 4.38, 4136.91, 13, 0.98, 65147.62, 13, 3.31, 154717.61, 13, 2.11, 1589.07, 13, 1.92, 22483.85, 12, 6.03, 9225.54, 12, 1.53, 12559.04, 12, 5.82, 6282.10, 12, 5.61, 5642.20, 12, 2.38, 167283.76, 12, 0.39, 12132.44, 12, 3.98, 4686.89, 12, 5.81, 12569.67, 12, 0.56, 5849.36, 11, 0.45, 6172.87, 11, 5.80, 16858.48, 11, 6.22, 12146.67, 11, 2.27, 5429.88,
      /*R2*/ 435939, 5.784551, 6283.075850, 12363, 5.57935, 12566.15170, 1234, 3.1416, 0.0000, 879, 3.628, 77713.771, 569, 1.870, 5573.143, 330, 5.470, 18849.228, 147, 4.480, 5507.553, 110, 2.842, 161000.686, 101, 2.815, 5223.694, 85, 3.11, 1577.34, 65, 5.47, 775.52, 61, 1.38, 6438.50, 50, 4.42, 6286.60, 47, 3.66, 7084.90, 46, 5.39, 149854.40, 42, 0.90, 10977.08, 40, 3.20, 5088.63, 35, 1.81, 5486.78, 32, 5.35, 3154.69, 30, 3.52, 796.30, 29, 4.62, 4690.48, 28, 1.84, 4694.00, 27, 3.14, 71430.70, 27, 6.17, 6836.65, 26, 1.42, 2146.17, 25, 2.81, 1748.02, 24, 2.18, 155.42, 23, 4.76, 7234.79, 21, 3.38, 7632.94, 21, 0.22, 4705.73, 20, 4.22, 1349.87, 20, 2.01, 1194.45, 20, 4.58, 529.69, 19, 1.59, 6309.37, 18, 5.70, 6040.35, 18, 6.03, 4292.33, 17, 2.90, 9437.76, 17, 2.00, 8031.09, 17, 5.78, 83996.85, 16, 0.05, 2544.31, 15, 0.95, 6127.66, 14, 0.36, 10447.39, 14, 1.48, 2352.87, 13, 0.77, 553.57, 13, 5.48, 951.72, 13, 5.27, 6279.55, 13, 3.76, 6812.77, 11, 5.41, 6256.78, 10, 0.68, 1592.60, 10, 4.95, 398.15, 10, 1.15, 3894.18, 10, 5.20, 244287.60, 10, 1.94, 11856.22, 9, 5.39, 25132.30, 8, 6.18, 1059.38, 8, 0.69, 8429.24, 8, 5.85, 242.73, 7, 5.26, 14143.50, 7, 0.52, 801.82, 6, 2.24, 8635.94, 6, 4.00, 13367.97, 6, 2.77, 90955.55, 6, 5.17, 7058.60, 5, 1.46, 233141.31, 5, 4.13, 7860.42, 5, 3.91, 26.30, 5, 3.89, 12036.46, 5, 5.58, 6290.19, 5, 5.54, 1990.75, 5, 0.83, 11506.77, 5, 6.22, 6681.22, 4, 5.26, 10575.41, 4, 1.91, 7477.52, 4, 0.43, 10213.29, 4, 1.09, 709.93, 4, 5.09, 11015.11, 4, 4.22, 88860.06, 4, 3.57, 7079.37, 4, 1.98, 6284.06, 4, 3.93, 10973.56, 4, 6.18, 9917.70, 4, 0.36, 10177.26, 4, 2.75, 3738.76, 4, 3.33, 5643.18, 4, 5.36, 25158.60,
      /*R3*/ 14459, 4.27319, 6283.07585, 673, 3.917, 12566.152, 77, 0.00, 0.00, 25, 3.73, 18849.23, 4, 2.80, 6286.60,
      /*R4*/ 386, 2.564, 6283.076, 31, 2.27, 12566.15, 5, 3.44, 5573.14, 2, 2.05, 18849.23, 1, 2.06, 77713.77, 1, 4.41, 161000.69, 1, 3.82, 149854.40, 1, 4.08, 6127.66, 1, 5.26, 6438.50,
      /*R5*/ 9, 1.22, 6283.08, 1, 0.66, 12566.15]
  ];
  //=================================行星星历=========================================
//==================================================================================

  var XL0_xzb = new Array( //行星星历修正表
    //经(角秒),纬(角秒), 距(10-6AU)
    -0.08631, +0.00039, -0.00008, //水星
    -0.07447, +0.00006, +0.00017, //金星
    -0.07135, -0.00026, -0.00176, //火星
    -0.20239, +0.00273, -0.00347, //木星
    -0.25486, +0.00276, +0.42926, //土星
    +0.24588, +0.00345, -14.46266, //天王星
    -0.95116, +0.02481, +58.30651 //海王星
  );


  function XL0_calc(xt, zn, t, n) { //xt星体,zn坐标号,t儒略世纪数,n计算项数
    t /= 10; //转为儒略千年数
    var i, j, v = 0, tn = 1, c;
    var F = XL0[xt], n1, n2, N;
    var n0, pn = zn * 6 + 1, N0 = F[pn + 1] - F[pn]; //N0序列总数
    for (i = 0; i < 6; i++, tn *= t) {
      n1 = F[pn + i], n2 = F[pn + 1 + i], n0 = n2 - n1;
      if (!n0) continue;
      if (n < 0) N = n2; //确定项数
      else {
        N = Math.floor(3 * n * n0 / N0 + 0.5) + n1;
        if (i) N += 3;
        if (N > n2) N = n2;
      }
      for (j = n1, c = 0; j < N; j += 3) {
        c += F[j] * Math.cos(F[j + 1] + t * F[j + 2]);
      }
      v += c * tn;

    }
    v /= F[0];
    if (xt == 0) { //地球
      var t2 = t * t, t3 = t2 * t; //千年数的各次方
      if (zn == 0) v += (-0.0728 - 2.7702 * t - 1.1019 * t2 - 0.0996 * t3) / Angle.R2A;
      if (zn == 1) v += (+0.0000 + 0.0004 * t + 0.0004 * t2 - 0.0026 * t3) / Angle.R2A;
      if (zn == 2) v += (-0.0020 + 0.0044 * t + 0.0213 * t2 - 0.0250 * t3) / 1000000;
    } else { //其它行星
      var dv = XL0_xzb[ (xt - 1) * 3 + zn ];
      if (zn == 0) v += -3 * t / Angle.R2A;
      if (zn == 2) v += dv / 1000000;
      else   v += dv / Angle.R2A;
    }
    return v;
  }


})();

